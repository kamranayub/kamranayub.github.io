<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
	<link rel="self" href="https://kamranicus.com/" />
	<id>https://kamranicus.com/</id>
	<title>Kamranicus</title>
	<rights>2020</rights>
	<updated>2020-01-01T14:50:34Z</updated>
	<subtitle>Kamran Ayub</subtitle>
	<entry>
		<link href="https://kamranicus.com/posts/2020-01-01-year-in-review-2020-goals" />
		<id>https://kamranicus.com/posts/2020-01-01-year-in-review-2020-goals</id>
		<title>2019 Year and Decade in Review plus 2020 Goals</title>
		<updated>2020-01-01T05:08:00Z</updated>
		<content>&lt;p&gt;That was fast. &lt;a href="https://kamranicus.com/posts/2019-07-12-quarterly-2-update"&gt;Last I checked in with you&lt;/a&gt;, half the year had already passed. Then I planned to do a third quarter update and suddenly it was the end of the year. I even have a draft of the third quarter newsletter and now I'm just rolling it into the year-end newsletter.&lt;/p&gt;
&lt;h2 id="its-been-quite-a-decade"&gt;It's been quite a decade&lt;/h2&gt;
&lt;p&gt;An entire decade is concluding and Twitter is a-fire with decade-in-review posts.&lt;/p&gt;
&lt;p&gt;I am going to keep this quick, let's go over what happened since 2010!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;🎓 I graduated from business school with a degree in MIS and a minor in Entrepreneurship.&lt;/li&gt;
&lt;li&gt;💑 I married my wife, Cassie and 👶 we had two kids, Rami and Saira!&lt;/li&gt;
&lt;li&gt;🏠 We bought a house.&lt;/li&gt;
&lt;li&gt;✈ We took &lt;a href="https://kamranicus.com/posts/2015-05-21-5-things-for-6-months-abroad"&gt;a 6-month sabbatical&lt;/a&gt; in 2015 and lived in Europe. In the decade we &lt;a href="/travel"&gt;traveled&lt;/a&gt; around North America and Europe, visiting various US states, Montreal, Hawaii, Iceland, Britain, Ireland, Norway, the Netherlands, Morocco, France, and Italy.&lt;/li&gt;
&lt;li&gt;🏢 I started full-time as an Application Developer at General Mills and am starting 2020 as a Lead Engineer at Target.&lt;/li&gt;
&lt;li&gt;🌎 I started &lt;a href="https://keeptrackofmygames.com"&gt;Keep Track of My Games&lt;/a&gt; and started a new blog, &lt;a href="https://looksgoodtous.com"&gt;Looks Good to Us&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;👨‍🏫 I became an educator and released &lt;a href="/training"&gt;5 video courses&lt;/a&gt;, including &lt;a href="https://kamranicus.com/posts/2017-10-10-becoming-a-pluralsight-author"&gt;becoming a Pluralsight author&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;🎤 I was a public speaker and spoke &lt;a href="/events"&gt;at over 20+ community events&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;🎮 I helped develop and create &lt;a href="/projects"&gt;5 games&lt;/a&gt; and &lt;a href="https://keeptrackofmygames.com/users/kamranicus/lists/played"&gt;played many others&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;📱 I released &lt;a href="/projects"&gt;3 mobile apps&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;💰 We achieved a 40%+ &lt;a href="https://www.mrmoneymustache.com/2012/01/13/the-shockingly-simple-math-behind-early-retirement/"&gt;savings rate&lt;/a&gt; after discovering the idea and community of &lt;a href="https://www.choosefi.com/welcome-to-financial-independence/"&gt;financial independence&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;🚗 We owned the same cars, a Corolla and Elantra, the entire decade. 😋&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Holy Shit.&lt;/strong&gt; I did a ton of stuff. I have a LOT to be proud of and thankful for. 🙏 The next decade will hopefully be even more rewarding for me and my family.&lt;/p&gt;
&lt;h2 id="goals-in-review"&gt;2019 Goals in Review&lt;/h2&gt;
&lt;p&gt;Again let's start with a review of what I set out to do in 2019, as of &lt;a href="https://kamranicus.com/posts/2019-07-12-quarterly-2-update"&gt;my last update&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id="primary-goals"&gt;Primary Goals&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Professional&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;✅ Publish 1 Pluralsight course on Azure or TypeScript or React &lt;del&gt;by September&lt;/del&gt;
&lt;ul&gt;
&lt;li&gt;I just published &lt;a href="tbd"&gt;Contributing to an Open Source Project on GitHub&lt;/a&gt; right before the new year!&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;✅ &lt;a href="/guides"&gt;Publish 4 Pluralsight guides&lt;/a&gt; on React &amp;amp; TypeScript by May&lt;/li&gt;
&lt;li&gt;✅ &lt;a href="https://www.youtube.com/watch?v=mIejhIX7ObE"&gt;Speak at NDC MN&lt;/a&gt; on a TypeScript topic&lt;/li&gt;
&lt;li&gt;⛔ Publish 5 technical articles on the blog about Azure, TypeScript, or React
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;2 out of 5&lt;/em&gt; ain't bad! Check out &lt;a href="https://kamranicus.com/posts/2019-06-26-typescript-safe-destructuring-patterns"&gt;safe destructuring in TypeScript&lt;/a&gt; and &lt;a href="https://kamranicus.com/posts/2019-09-12-using-storybook-in-a-monorepo"&gt;using Storybook in a monorepo&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Personal&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;⛔ Pay off all non-mortgage debt
&lt;ul&gt;
&lt;li&gt;We paid off most of it except Cassie's school loan, which will be gone by November 2020, if not sooner. Instead of paying it all off, we are saving for a car purchase (in cash) for March/April.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;✅ Passive income should account for 2% of earnings, 1099 income for 5%
&lt;ul&gt;
&lt;li&gt;Passive income as a % of W-2: &lt;strong&gt;2.08%&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;1099 income as a % of W-2: &lt;strong&gt;2.89%&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Total side earnings:&lt;/strong&gt; 4.97%!&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Total % of annual expenses:&lt;/strong&gt; 8%!&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;✅ Replace my PCs at home with a single good Ultrabook/Notebook &lt;del&gt;and a NAS&lt;/del&gt;
&lt;ul&gt;
&lt;li&gt;As of yesterday, I completed upgrading my PC to SSDs-only and 32GB of RAM&lt;/li&gt;
&lt;li&gt;I also bought a used Lenovo Yoga 720 laptop earlier in the year which I love&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;⛔ Push 3 substantive updates to KTOMG throughout the year: Steam review revamp, Raven 4 upgrade, and Linux hosting
&lt;ul&gt;
&lt;li&gt;I completed 2 major updates: RavenDB 4 upgrade and IGDB migration. I am partially done with the 3rd update.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;DIY&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;✅ &lt;del&gt;Learn how to cut trim/baseboard and&lt;/del&gt; finish the nursery
&lt;ul&gt;
&lt;li&gt;Let's leave this at just paint since I decided to leave the trim.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="stretch-goals"&gt;Stretch Goals&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Professional&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;✅ Set up a &lt;a href="https://kamranicus.com/newsletter"&gt;quarterly newsletter&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;But I need to actually send it out &lt;em&gt;every&lt;/em&gt; quarter 😅&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;⛔ Publish 1 more Pluralsight course on Azure or TypeScript or React&lt;/li&gt;
&lt;li&gt;⛔ Publish 4 additional Pluralsight guides throughout the year&lt;/li&gt;
&lt;li&gt;⛔ Participate in 1 Pluralsight Mentoring session&lt;/li&gt;
&lt;li&gt;⛔ Become a Microsoft MVP with a focus on Azure/TypeScript content&lt;/li&gt;
&lt;li&gt;⛔ Speak at a JSConf or ReactConf event
&lt;ul&gt;
&lt;li&gt;No luck but I &lt;a href="https://kamranicus.com/posts/2019-10-08-mdc-2019-flexible-ui-architecture-react-graphql"&gt;did speak at MDC 2019&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;⛔ Speak at the React MN meetup about TypeScript or GraphQL
&lt;ul&gt;
&lt;li&gt;I did speak at the .NET User Group on RavenDB, though!&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;⛔ Record a YouTube video walkthrough of my &lt;a href="https://kamranicus.com/guides/raspberry-pi-3-baby-monitor"&gt;Raspberry Pi baby monitor&lt;/a&gt; written guide
&lt;ul&gt;
&lt;li&gt;I put out a feeler video instead, to see if there was any interest.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Personal&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;⛔ 1099 income should account for 12% or more (+2% over 2018) of W-2 income
&lt;ul&gt;
&lt;li&gt;Again, this wasn't my focus for 2019 and probably won't be for 2020 either. I'll readjust my goals accordingly.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;⛔ Travel completely free somewhere in the US with wife and 2 kids using miles/points
&lt;ul&gt;
&lt;li&gt;This summer we did a trip up to Voyageur National Park with friends and rented a cabin&lt;/li&gt;
&lt;li&gt;This goal will be for Summer 2020 and 2021, as we are gearing up for a &lt;strong&gt;huge&lt;/strong&gt; trip in 2021, more info later!&lt;/li&gt;
&lt;li&gt;We did earn 80,000 travel rewards points though, which will go towards those trips&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;⛔ Participate in Ludum Dare during the spring&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;DIY&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;⛔ &lt;del&gt;Install luxury vinyl plank in my office&lt;/del&gt;&lt;/li&gt;
&lt;li&gt;⛔ &lt;del&gt;Replace baseboard/trim in my son's bedroom&lt;/del&gt; Paint son's bedroom trim.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="unplanned-accomplishments"&gt;Unplanned Accomplishments&lt;/h3&gt;
&lt;p&gt;I like including this because it goes to show you can't predict everything for the year!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;🏆 Wrote &lt;a href="https://kamranicus.com/posts/2019-04-04-ravendb-data-modeling-with-indexes"&gt;freelance technical articles&lt;/a&gt; for RavenDB&lt;/li&gt;
&lt;li&gt;🏆 Started &lt;a href="https://kamranicus.com/posts/2019-09-10-looks-good-to-us-blog-launch"&gt;a new blog&lt;/a&gt; with Cassie&lt;/li&gt;
&lt;li&gt;🏆 Wrote &lt;a href="https://reachfi.app"&gt;a small app&lt;/a&gt; for tracking my savings rate&lt;/li&gt;
&lt;li&gt;🏆 Reached a savings rate of &lt;strong&gt;40%&lt;/strong&gt;, more than double last year's. I still can't believe we were able to accomplish that, it's huge!&lt;/li&gt;
&lt;li&gt;🏆 Started a new role at work and was promoted&lt;/li&gt;
&lt;li&gt;🏆 Learned a ton about &lt;a href="https://storybook.js.org"&gt;Storybook&lt;/a&gt; and how to use it &lt;a href="https://kamranicus.com/posts/2019-09-12-using-storybook-in-a-monorepo"&gt;on large projects&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="reflection"&gt;Reflection&lt;/h2&gt;
&lt;p&gt;Wow, I had a great 2019! There are quite a few partial or incomplete goals up there but all the important things were hit: new course, lots of writing, shoring up personal finances, in addition to some unplanned accomplishments like our new craft blog.&lt;/p&gt;
&lt;h2 id="lets-go-2020"&gt;Let's Go 2020&lt;/h2&gt;
&lt;p&gt;I feel like each year this list gets smaller and smaller -- which is good, I think. I would like to stay focused on what's important and will move the ball forward.&lt;/p&gt;
&lt;p&gt;By the way I should just mention that I haven't truly shared &lt;em&gt;the why&lt;/em&gt; behind these goals. I have a why but I am keeping that close to my chest. Just know I have 5-, 10-, 15-, and 20-year goals in mind when I write these and all these goals work towards those larger ones. You have to have &lt;a href="https://www.ted.com/talks/simon_sinek_how_great_leaders_inspire_action?language=en"&gt;the why&lt;/a&gt; nailed down to work towards, otherwise your goals exist in isolation.&lt;/p&gt;
&lt;h3 id="content"&gt;Content&lt;/h3&gt;
&lt;p&gt;I want to continue doing paid and free content creation in 2020. I feel like one course is a good goal to balance everything else but two would be great.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;👨‍🏫 Publish 1 Pluralsight course, &lt;strong&gt;Stretch:&lt;/strong&gt; 2 courses&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I have a couple paid opportunities to write and so I'd like to do at least two more. Tangential to that, I am tired of the friction of static site + Git + Markdown and would like to leverage &lt;a href="https://ghost.org"&gt;Ghost&lt;/a&gt; since I've been really happy with it for the &lt;a href="https://looksgoodtous.com"&gt;LGTU&lt;/a&gt; blog.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;✍ Write 2 articles on React, TypeScript, RavenDB, or Azure&lt;/li&gt;
&lt;li&gt;✍ Write 4 freelance articles&lt;/li&gt;
&lt;li&gt;👻 Migrate to Ghost for this blog&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I enjoy speaking but I don't intend for it to take over my life. Doing one or two large conferences a year is enough for me! I would still &lt;em&gt;love&lt;/em&gt; to get a chance to speak outside Minnesota, so I've applied to KCDC, NEJS, and React NYC.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;🎤 Speak at NDC MN and one other regional conference, &lt;strong&gt;Stretch:&lt;/strong&gt; Speak outside MN.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="financial"&gt;Financial&lt;/h3&gt;
&lt;p&gt;Now that I finished two major migrations for KTOMG, I want to work on getting my first paying user. To do that will require some more infrastructure work but I feel confident I can make it happen in 2020! I'm also feeling the friction of a heavy web front-end stack so I'd like to simplify it a bit.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;📈 Get &lt;a href="http://ktomg.com"&gt;Keep Track of My Games&lt;/a&gt; to make a profit&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Right now LGTU doesn't cost us much, about $15 per month. I'd like to earn at least that much in affiliate revenue for 2020.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;📈 Get &lt;a href="https://looksgoodtous.com"&gt;Looks Good to Us&lt;/a&gt; to make a profit&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I modified the financial goals from last year to take a different perspective. Rather than measuring side income in terms of W-2 income, I'm comparing it against our annual expenses which is much more under our control. In 2019, it covered 8% of our expenses which is &lt;strong&gt;awesome.&lt;/strong&gt; We also maintained a respectable 40% savings rate (see also &lt;a href="https://esimoney.com/the-gap-is-the-key-to-wealth/"&gt;The Gap&lt;/a&gt;) and I want to maintain that momentum going into 2020. It will actually be tougher since we have to buy a new (used) vehicle.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;💰 Passive and 1099 income should cover 10% of our annual expenses&lt;/li&gt;
&lt;li&gt;💵 Maintain a 40% annual savings rate&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I activated &lt;a href="https://github.com/sponsors/kamranayub"&gt;my GitHub sponsor profile&lt;/a&gt;. If you want to support me directly, that's a way to do it. I am not sure what to expect from this but I'll be &lt;em&gt;pleasantly&lt;/em&gt; surprised if I get at least one sponsor in 2020.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;🙏 Have one sponsor on GitHub&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="diy"&gt;DIY&lt;/h3&gt;
&lt;p&gt;I still feel like I'm in the &amp;quot;learning&amp;quot; phase of DIY but I am starting to get comfortable knowing what I want to do around the house. I have one specific project in mind I'm very motivated to do and it would teach me everything about framing and drywall in a small, controlled space. I'd like to build a closet around the sump pump in our basement family room (which is otherwise just exposed in plain sight 😑).&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;🛠 Finish the last egress window cover&lt;/li&gt;
&lt;li&gt;🛠 Finish one basement-related project&lt;/li&gt;
&lt;li&gt;🛠 &lt;strong&gt;Stretch&lt;/strong&gt;: Finish an upstairs home project&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="looking-forward"&gt;Looking forward&lt;/h2&gt;
&lt;p&gt;I am pretty excited about what 2020 holds and how it will get me closer to my overall goals in life and family. Each year seems to be even better than the last and I hope the trend continues. I'm sure some of these goals won't be achieved in total but even making progress against them is a huge win.&lt;/p&gt;
&lt;p&gt;What are your goals for 2020? Do you have any specific things you want to get done?&lt;/p&gt;
</content>
		<summary>&lt;p&gt;That was fast. &lt;a href="https://kamranicus.com/posts/2019-07-12-quarterly-2-update"&gt;Last I checked in with you&lt;/a&gt;, half the year had already passed. Then I planned to do a third quarter update and suddenly it was the end of the year. I even have a draft of the third quarter newsletter and now I'm just rolling it into the year-end newsletter.&lt;/p&gt;</summary>
	</entry>
	<entry>
		<link href="https://kamranicus.com/posts/2019-12-31-pluralsight-contributing-to-open-source" />
		<id>https://kamranicus.com/posts/2019-12-31-pluralsight-contributing-to-open-source</id>
		<title>Just Finished Contributing to an Open Source Project on GitHub Course</title>
		<updated>2020-01-01T04:00:00Z</updated>
		<content>&lt;p&gt;Since mid-October I've been working on my newest Pluralsight course and I can finally announce it's here! ✨ The &lt;a href="http://bit.ly/PSContributingToOpenSource"&gt;Contributing to an Open Source Project on GitHub&lt;/a&gt; course will teach you how to be an effective open source contributor by showing you how to work with others and work through common scenarios you'd find in the real-world. It distills most of the foundational concepts I've used in practice contributing to open source (and inner source) over the years and it was a fun course to build!&lt;/p&gt;
&lt;p&gt;&lt;img src="https://user-images.githubusercontent.com/563819/71635500-cd9a3b00-2bea-11ea-9729-a4b32d7a1284.png" class="img-fluid" alt="Course overview trailer screenshot" /&gt;&lt;/p&gt;
&lt;p&gt;It's designed for folks new to open source, who may never have contributed before but are interested in how to get started. I cover tips for opening pull requests, finding issues to work on, working with maintainers, and tons of scenarios you might run into while contributing code.&lt;/p&gt;
&lt;p&gt;If that sounds like something you're interested in, &lt;a href="http://bit.ly/PSContributingToOpenSource"&gt;check it out&lt;/a&gt;!&lt;/p&gt;
&lt;h2 id="the-build-process"&gt;The build process&lt;/h2&gt;
&lt;p&gt;I've &lt;a href="https://kamranicus.com/posts/2018-10-18-new-azure-pluralsight-courses"&gt;documented before&lt;/a&gt; how I track working on my courses and to that end nothing has changed. I use previous course Trello cards as a template for new ones. However, one thing that &lt;em&gt;may&lt;/em&gt; change in the future is switching to &lt;a href="http://notionhq.com"&gt;Notion&lt;/a&gt; instead which would allow me greater flexibility in organizing work.&lt;/p&gt;
&lt;h2 id="estimates-are-hard"&gt;Estimates are hard&lt;/h2&gt;
&lt;p&gt;Imagine my surprise when &lt;em&gt;halfway&lt;/em&gt; through the course, I blew through my course time budget:&lt;/p&gt;
&lt;p&gt;&lt;img src="images/2019-12-course-time-exceeded.png" class="img-fluid" alt="Total time was double than what I thought" /&gt;&lt;/p&gt;
&lt;p&gt;By the end, I was double what I thought (pretty much &lt;em&gt;exactly&lt;/em&gt;). It just goes to show it's tough to estimate how long an individual course might take. Recall last time each Azure course was about 60 hours of work (for 120 total).&lt;/p&gt;
&lt;p&gt;What I think contributed to the overtime:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Complex demo flows.&lt;/strong&gt; I felt very strongly that I show how to work within an &lt;em&gt;actual&lt;/em&gt; GitHub repository and in order to do so, I had to make it public and create several test accounts. I had multiple browser windows open in order to do the recordings because I couldn't effectively set up everything beforehand as each demo built on top of one another.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Lots of content.&lt;/strong&gt; The draft produced course was actually around 2h15m or so and I was able to edit it down to 1h45m for the final production. When I do content planning I script out all the demos, what to cover, etc. so the end result is more polished but it's hard to estimate how long each clip will be when you do that.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Technical issues.&lt;/strong&gt; I upgraded to Camtasia 2019 and overall it was good except for the fact that it ran into some bugs like where I couldn't easily select a window to record, which meant each time I had to resize the window and recording outline manually to align properly. Furthermore, it seems like Camtasia chokes on anything more than 10 minutes long because it's just a bear when it starts getting long. Another author mentioned they do one Camtasia project per clip and I think that's what I'm going to do going forward. The UI lag was killing me.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I am pretty pleased with the end result but that extra time was squeezed into about 4-5 weeks which was pretty intense on my schedule.&lt;/p&gt;
&lt;h2 id="final-thoughts"&gt;Final thoughts&lt;/h2&gt;
&lt;p&gt;I'm excited to release this course because it's much less of a technical how-to and more of a holistic best practice course. I focused a lot on communication techniques and peppered the course with tips and tricks I've used in real-life.&lt;/p&gt;
&lt;p&gt;I kept thinking of more things I could possibly do later for a second edition, for example I bet you could do an entire module on all the interpersonal topics related to open source. I actually didn't realize how comprehensive the Pluralsight catalog was already &lt;a href="https://pluralsight.pxf.io/6LdEG"&gt;covering communication skills&lt;/a&gt; so I'm glad I recommended those and I plan to go through them all myself.&lt;/p&gt;
&lt;p&gt;If contributing to open source seems interesting you and you haven't had a lot of experience, I hope you find the course useful!&lt;/p&gt;
</content>
		<summary>&lt;p&gt;Since mid-October I've been working on my newest Pluralsight course and I can finally announce it's here! ✨ The &lt;a href="http://bit.ly/PSContributingToOpenSource"&gt;Contributing to an Open Source Project on GitHub&lt;/a&gt; course will teach you how to be an effective open source contributor by showing you how to work with others and work through common scenarios you'd find in the real-world. It distills most of the foundational concepts I've used in practice contributing to open source (and inner source) over the years and it was a fun course to build!&lt;/p&gt;</summary>
	</entry>
	<entry>
		<link href="https://kamranicus.com/posts/2019-10-08-mdc-2019-flexible-ui-architecture-react-graphql" />
		<id>https://kamranicus.com/posts/2019-10-08-mdc-2019-flexible-ui-architecture-react-graphql</id>
		<title>MDC 2019 Recording Live for Flexible UI Architecture with React and GraphQL</title>
		<updated>2019-10-09T03:00:00Z</updated>
		<content>&lt;p&gt;I had the opportunity to speak at &lt;a href="https://mdc.ilmservices.com"&gt;MDC 2019&lt;/a&gt; recently and recorded my talk &lt;a href="https://www.youtube.com/watch?v=dCawL3nAnUA&amp;amp;list=PLmmRwaXW1nVTi2uv1vpy9B7pvI0X-vMc4&amp;amp;index=7&amp;amp;t=0s"&gt;Designing a Flexible UI Architecture with React and GraphQL&lt;/a&gt;. I think it's even better than the version I gave &lt;a href="https://kamranicus.com/posts/2019-02-01-ndc-minnesota-flexible-ui-with-react-graphql-typescript"&gt;at NDC MN&lt;/a&gt; earlier this year.&lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/dCawL3nAnUA" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen&gt;&lt;/iframe&gt;
&lt;h2 id="whats-the-talk-about"&gt;What's the talk about?&lt;/h2&gt;
&lt;p&gt;Here's the abstract:&lt;/p&gt;
&lt;blockquote class="blockquote"&gt;
&lt;p&gt;If your application suffers from hard-to-debug UI state, complex client-side business rules, and has trouble scaling to meet your performance needs you might be tearing your hair out. In this session I will share how we shifted the way we thought about our application using a 3 step process from the ground up. I’ll show you how we built a declarative “schema-driven UI” engine built on React and GraphQL that could manage business complexity and still scale to meet future business requirements.&lt;/p&gt;
&lt;p&gt;I'll share our approach, some challenges we faced and advice for your own applications so you can design your own declarative schema-driven UI architecture that fits your business needs. Don’t fret if you don’t use React or GraphQL because this pattern can be introduced into any framework you might be using.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="what-did-people-say"&gt;What did people say?&lt;/h2&gt;
&lt;p&gt;Like I said, I thought this went even better than the one I gave at NDC (&lt;a href="https://www.youtube.com/watch?v=mIejhIX7ObE&amp;amp;list=PLmmRwaXW1nVTi2uv1vpy9B7pvI0X-vMc4&amp;amp;index=2"&gt;recording&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;This last session was rated &lt;strong&gt;4.3/5&lt;/strong&gt; out of 25 ratings. 💖 Some specific feedback I got:&lt;/p&gt;
&lt;blockquote class="blockquote"&gt;
&lt;p&gt;&amp;quot;so much content!!!&amp;quot;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote class="blockquote"&gt;
&lt;p&gt;&amp;quot;useful approach&amp;quot;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote class="blockquote"&gt;
&lt;p&gt;&amp;quot;very handy guide to UI design with any technology&amp;quot;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;🙏 I was very happy to read these! I even had to cut out content to fit within 50 minutes.&lt;/p&gt;
&lt;p&gt;I also had a couple people come up afterwards who said they thought the content was great and &amp;quot;impressive.&amp;quot; Great!&lt;/p&gt;
&lt;blockquote class="blockquote"&gt;
&lt;p&gt;&amp;quot;wish would of talked more generic graphQL and react to&amp;quot;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I &lt;em&gt;think&lt;/em&gt; this last comment was referring to maybe adding more introductory content around GraphQL/React. Totally fair but I think the case study and design methodology are the focal points and for an intermediate talk, I don't have enough time to introduce React much though I &lt;em&gt;do&lt;/em&gt; spend at least 5-8 minutes on why GraphQL was a good fit for this architecture.&lt;/p&gt;
&lt;h2 id="what-did-i-change"&gt;What did I change?&lt;/h2&gt;
&lt;p&gt;I made a few changes structurally to the presentation that I think made it even better this time around.&lt;/p&gt;
&lt;h3 id="wrote-a-script"&gt;Wrote a script&lt;/h3&gt;
&lt;p&gt;What! Actually this is something I've had to admit about myself. It's better if I write out my thoughts first to get them in order and be more articulate. I have time to mull it over and edit. I did this on my last two courses and it made a real difference in quality.&lt;/p&gt;
&lt;p&gt;Each of the slides now has full speaker notes and I practiced reading through it several times to get the flow and points straight that I wanted to make.&lt;/p&gt;
&lt;h3 id="cut-out-the-bio"&gt;Cut out the bio&lt;/h3&gt;
&lt;p&gt;I got rid of the &amp;quot;about me&amp;quot; section and replaced with a single slide at the end with resources. I basically launch into the talk and &lt;em&gt;then at the end&lt;/em&gt; when people have heard what I have to say, they can look me up. This was some advice I came across online from somewhere (maybe &lt;a href="https://dev.to/tlakomy/what-i-wished-someone-told-me-about-speaking-at-tech-conferences-3opp"&gt;this&lt;/a&gt; or &lt;a href="https://www.youtube.com/watch?v=AzVr_nsKoZs&amp;amp;feature=youtu.be"&gt;even this meta talk&lt;/a&gt;) that I implemented.&lt;/p&gt;
&lt;h3 id="start-with-the-point"&gt;Start with the point&lt;/h3&gt;
&lt;p&gt;My teacher in high school gave me this advice about speaking:&lt;/p&gt;
&lt;blockquote class="blockquote"&gt;
&lt;p&gt;&amp;quot;Tell them what you want to tell them, tell them, then tell them what you told them.&amp;quot;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I didn't know it until later but this advice actually originated from &lt;a href="https://www.inc.com/john-baldoni/deliver-a-great-speech-aristotle-three-tips.html"&gt;Aristotle&lt;/a&gt;. I am reading some books on rhetoric currently so that was neat to learn.&lt;/p&gt;
&lt;p&gt;Even though I &lt;em&gt;knew this&lt;/em&gt; intellectually it hit home more after we had an internal guest speaker at work, Frances Frei, talk about rebuilding trust. It was a lengthier version of her &lt;a href="https://www.youtube.com/watch?v=pVeq-0dIqpk"&gt;TED talk&lt;/a&gt; which I highly recommend.&lt;/p&gt;
&lt;p&gt;She says if you're having a hard time getting your point across, it may be because you take a long, winding road to get to your point. Instead, just &lt;em&gt;start with your point&lt;/em&gt; and people will be more engaged.&lt;/p&gt;
&lt;p&gt;So that's what I did, my second slide is the whole point of the presentation. Then I follow Aristotle's advice and summarize at the end.&lt;/p&gt;
&lt;h3 id="divide-into-3-parts"&gt;Divide into 3 parts&lt;/h3&gt;
&lt;p&gt;Everything is better in threes. I divided the talk into 3 main sections and I think that really helped keep the flow and structure solid in people's minds.&lt;/p&gt;
&lt;h2 id="what-would-i-change"&gt;What would I change?&lt;/h2&gt;
&lt;p&gt;Plenty. Each time I give a talk it surfaces more things I'd change.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I'd like to do more with the Adobe XD design I made: animations, callouts, etc.&lt;/li&gt;
&lt;li&gt;I think I'll redo the GraphQL section next time.&lt;/li&gt;
&lt;li&gt;I want to add a &amp;quot;post-mortem&amp;quot; section again, I took it out due to time but I might be able to save on time other places.&lt;/li&gt;
&lt;li&gt;I would &lt;strong&gt;love&lt;/strong&gt; to show a minimal demo/sample using one of the libraries I mention.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I might have a chance to do these things, I've submitted the talk to several more conferences for 2020. Wish me luck!&lt;/p&gt;
</content>
		<summary>&lt;p&gt;I had the opportunity to speak at &lt;a href="https://mdc.ilmservices.com"&gt;MDC 2019&lt;/a&gt; recently and recorded my talk &lt;a href="https://www.youtube.com/watch?v=dCawL3nAnUA&amp;amp;list=PLmmRwaXW1nVTi2uv1vpy9B7pvI0X-vMc4&amp;amp;index=7&amp;amp;t=0s"&gt;Designing a Flexible UI Architecture with React and GraphQL&lt;/a&gt;. I think it's even better than the version I gave &lt;a href="https://kamranicus.com/posts/2019-02-01-ndc-minnesota-flexible-ui-with-react-graphql-typescript"&gt;at NDC MN&lt;/a&gt; earlier this year.&lt;/p&gt;</summary>
	</entry>
	<entry>
		<link href="https://kamranicus.com/posts/2019-09-12-using-storybook-in-a-monorepo" />
		<id>https://kamranicus.com/posts/2019-09-12-using-storybook-in-a-monorepo</id>
		<title>Using Storybook in a Monorepo</title>
		<updated>2019-09-17T12:00:00Z</updated>
		<content>&lt;p&gt;I'm currently working in a small monorepo and we have multiple packages set up for shared components, like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;packages/
  atoms/
  molecules/
  organisms/
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Each package has React components under a &lt;code&gt;src&lt;/code&gt; directory and since each directory &lt;em&gt;is&lt;/em&gt; a package, they also contain &lt;code&gt;node_modules&lt;/code&gt; (more on why that's important below).&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;packages/
  atoms/
    node_modules/
    src/
      components/
        Hello.js
        Hello.stories.js
    package.json
  molecules/
  organisms/
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is different than other posts I've seen that use a root &lt;code&gt;stories/&lt;/code&gt; directory -- that is not how we'd like to set up our repo, we'd prefer stories to live right next to the components they describe.&lt;/p&gt;
&lt;h2 id="setting-up-storybook"&gt;Setting Up Storybook&lt;/h2&gt;
&lt;p&gt;You can follow the same steps on the &lt;a href="https://storybook.js.org/docs/guides/guide-react/"&gt;getting started page&lt;/a&gt; for setting up Storybook in a monorepo.&lt;/p&gt;
&lt;p&gt;Once it's done, you should have a new folder at the root:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;.storybook/
  config.js
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If not, make sure that gets created. We need to make some changes to &lt;code&gt;config.js&lt;/code&gt; to read stories within each package in the monorepo.&lt;/p&gt;
&lt;h2 id="configuring-storybook-for-a-monorepo"&gt;Configuring Storybook for a Monorepo&lt;/h2&gt;
&lt;p&gt;The key issue I ran into that prompted me to write about this is that we need to import stories using the &lt;a href="https://github.com/webpack/docs/wiki/context"&gt;Webpack context&lt;/a&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;require.context('../packages', true, /stories.jsx?$/);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This prompts Webpack to scan a &lt;code&gt;src&lt;/code&gt; directory for paths containing &lt;code&gt;stories.js&lt;/code&gt; or &lt;code&gt;stories.jsx&lt;/code&gt; anywhere in the string.&lt;/p&gt;
&lt;p&gt;Since Webpack &lt;em&gt;statically analyzes&lt;/em&gt; this code it means we &lt;strong&gt;cannot&lt;/strong&gt; dynamically read the file system and iterate through each package directory (I tried that 😔).&lt;/p&gt;
&lt;p&gt;There's another problem. Remember I mentioned each package directory has &lt;code&gt;node_modules&lt;/code&gt; and possibly other directories which means that the following paths will match the regular expression:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# some node modules (like Storybook itself) use Storybook
./atoms/node_modules/&amp;#64;storybook__react/src/stories/blah.stories.js

# code coverage reports, uses same paths!
./molecules/lcov-report/_html/src/components/Hello.stories.js
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And you can imagine more paths like that can match. Webpack will attempt to import these files into the bundle it generates but these will most likely cause build errors. That isn't what we want! We need to &lt;em&gt;exclude&lt;/em&gt; everything but the &lt;code&gt;src&lt;/code&gt; directory in a package when matching files.&lt;/p&gt;
&lt;p&gt;The solution, as it turns out is fairly straightforward, since we have a convention where each package has components within a &lt;code&gt;src&lt;/code&gt; directory, we really just need to match that inner &lt;code&gt;src&lt;/code&gt; after the package name, so we can write a regular expression like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;require.context('../packages', true, /^\.\/[^\/]+\/src\/.*stories\.jsx?$/);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let's break it down:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;^               # match beginning of path
\.\/            # the path will begin with a &amp;quot;./&amp;quot;, like ./atoms
[^\/]+          # get the first path segment (match characters up to first /)
\/src\/         # ensure we match under the `src` directory
.*              # match any character
stories\.jsx?   # match anything with &amp;quot;stories.js(x)&amp;quot; in it
$               # match end of string
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here's an example using my favorite regex tool &lt;a href="https://regexr.com"&gt;RegExr&lt;/a&gt; on which paths match and which don't:&lt;/p&gt;
&lt;p&gt;&lt;img src="https://user-images.githubusercontent.com/563819/65041547-a4e08500-d91c-11e9-895d-7acaf4cc65a1.png" class="img-fluid" alt="regex example" /&gt;&lt;/p&gt;
&lt;p&gt;Handy!&lt;/p&gt;
&lt;h2 id="the-final-config"&gt;The Final Config&lt;/h2&gt;
&lt;p&gt;Here's our final &lt;code&gt;config.js&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;import { configure } from '&amp;#64;storybook/react';

function loadStories() {
  const req = require.context('../packages', true, /^\.\/[^\/]+\/src\/.*stories\.jsx?$/);
  req.keys().forEach(filename =&amp;gt; req(filename));
}

configure(loadStories, module);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I hope this helps someone else and saves them the few hours I spent performing the correct rites to get this to work!&lt;/p&gt;
</content>
		<summary>&lt;p&gt;I'm currently working in a small monorepo and we have multiple packages set up for shared components, like this:&lt;/p&gt;</summary>
	</entry>
	<entry>
		<link href="https://kamranicus.com/posts/2019-09-10-looks-good-to-us-blog-launch" />
		<id>https://kamranicus.com/posts/2019-09-10-looks-good-to-us-blog-launch</id>
		<title>Just Launched: Looks Good to Us DIY and Crafting Blog</title>
		<updated>2019-09-10T14:10:00Z</updated>
		<content>&lt;p&gt;My wife and I just started a crafting and DIY blog, &lt;a href="https://looksgoodtous.com"&gt;Looks Good to Us&lt;/a&gt; last week. We have new posts every Wednesday and you can subscribe to get weekly updates. You can also follow us on &lt;a href="https://twitter.com/looksgoodtous"&gt;Twitter&lt;/a&gt; and &lt;a href="https://instagram.com/looksgoodtous"&gt;Instagram&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="diy-sewing-and-knitting-oh-my"&gt;DIY, Sewing, and Knitting, Oh My!&lt;/h2&gt;
&lt;p&gt;&lt;img src="https://user-images.githubusercontent.com/563819/64663997-49d9fa00-d413-11e9-9039-23478f94a39c.png" class="img-fluid" alt="LGTU logo" /&gt;&lt;/p&gt;
&lt;p&gt;While &lt;em&gt;this&lt;/em&gt; blog revolves around technology and personal topics, LGTU is focused on my and Cassie's shared hobby of crafts: I like home automation, DIY, and &amp;quot;Maker&amp;quot; activities, she likes knitting and sewing. She frankly does much more than I do, since I have like 5 hobbies and she mostly has just the two (good for her!). You can read about it in our &lt;a href="https://looksgoodtous.com/welcome"&gt;Welcome&lt;/a&gt; post.&lt;/p&gt;
&lt;p&gt;There are two things I focused on with how I launched this new blog. I &lt;strong&gt;optimized for time&lt;/strong&gt; and &lt;strong&gt;avoided yak shaving.&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id="optimize-for-time"&gt;Optimize for Time&lt;/h2&gt;
&lt;p&gt;First, I optimized for frictionless writing. I needed something &lt;em&gt;fast&lt;/em&gt; and &lt;em&gt;collaborative&lt;/em&gt; because my wife is not a developer and I wanted to remove any excuse &lt;em&gt;not&lt;/em&gt; to write. So I used &lt;a href="https://ghost.org"&gt;Ghost&lt;/a&gt; and self-hosted it on a &lt;a href="https://marketplace.digitalocean.com/apps/ghost"&gt;Digital Ocean 1-click droplet&lt;/a&gt; (if you use it, help me out and &lt;a href="https://m.do.co/c/1026c3c0c89b"&gt;use my referral link&lt;/a&gt;). Digital Ocean is awesome and the process only took an evening and we were up and running. More on that later!&lt;/p&gt;
&lt;p&gt;Ghost is amazing 🤩 It uses the same editor Medium does which my wife and I used when we wrote posts during &lt;a href="https://kamranicus.com/travel"&gt;our travels&lt;/a&gt;. I also love the seamless workflow for drafting, scheduling, and editing. It allows my wife and I to schedule out posts ahead of time, essentially self-imposing a deadline each week, as shown below:&lt;/p&gt;
&lt;p&gt;&lt;img src="https://user-images.githubusercontent.com/563819/64664906-4b58f180-d416-11e9-974b-e98899fc93d3.png" class="img-fluid" alt="LGTU post pipeline" /&gt;&lt;/p&gt;
&lt;p&gt;Congratulations, you get a sneak peek! The workflow is great and really removes all the barriers to writing that my lizard brain requires.&lt;/p&gt;
&lt;h2 id="no-yak-shaving-allowed"&gt;No Yak Shaving Allowed&lt;/h2&gt;
&lt;p&gt;The second thing I did differently, I didn't &lt;a href="https://www.hanselman.com/blog/YakShavingDefinedIllGetThatDoneAsSoonAsIShaveThisYak.aspx"&gt;shave any yaks&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote class="blockquote"&gt;
&lt;p&gt;&amp;quot;Yak shaving is what you are doing when you're doing some stupid, fiddly little task that bears no obvious relationship to what you're supposed to be working on, but yet a chain of twelve causal relations links what you're doing to the original meta-task.&amp;quot; - Scott Hanselman&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We developers are &lt;em&gt;great&lt;/em&gt; at yak shaving. I could have spent a month making a logo (I spent 30 mins), customizing the theme (I made one edit), and designing a CI/CD DevOps-y Git-integrated workflow (I just use Ghost). By the time the blog would have launched, it would be &lt;em&gt;perfect&lt;/em&gt; and also I would have wasted months (or years, if you shave a lot of yaks).&lt;/p&gt;
&lt;p&gt;It reminds me of a quote I recently heard on a podcast:&lt;/p&gt;
&lt;blockquote class="blockquote"&gt;
&lt;p&gt;&amp;quot;If you aren't embarassed by your first version, you're launching too late.&amp;quot;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So I didn't sweat it. I talked to my wife and we came up with a rotating weekly cadence. We already have 4-5 weeks of content. At this rate, we could even think about switching to twice a week but frankly I want to just give us some breathing room in-between posts. The fact that each of us gets 2 weeks is perfect right now.&lt;/p&gt;
&lt;h2 id="be-consistent"&gt;Be consistent&lt;/h2&gt;
&lt;p&gt;The number one recommendation I keep hearing over and over from successful content creators is that &lt;strong&gt;consistency&lt;/strong&gt; is crucial to building an audience. Fostering a community is also incredibly important. I made sure that we can do both for LGTU by enabling comments and hooking up the blog subscription to &lt;a href="http://eepurl.com/gpjY_H"&gt;Mailchimp&lt;/a&gt; (my referral link again!), which is what I use for my own newsletter.&lt;/p&gt;
&lt;p&gt;I need to do better for &lt;em&gt;this&lt;/em&gt; blog and it's on my list for this next year. I wish I could do it in an evening but due to the way all my source is in Markdown, I'll need to convert my posts for Ghost (they have a JSON import, though). It'll be added to my goals, don't worry. 😉&lt;/p&gt;
</content>
		<summary>&lt;p&gt;My wife and I just started a crafting and DIY blog, &lt;a href="https://looksgoodtous.com"&gt;Looks Good to Us&lt;/a&gt; last week. We have new posts every Wednesday and you can subscribe to get weekly updates. You can also follow us on &lt;a href="https://twitter.com/looksgoodtous"&gt;Twitter&lt;/a&gt; and &lt;a href="https://instagram.com/looksgoodtous"&gt;Instagram&lt;/a&gt;.&lt;/p&gt;</summary>
	</entry>
	<entry>
		<link href="https://kamranicus.com/posts/2019-09-03-aspnetmvc5-asset-versioning-url-helper" />
		<id>https://kamranicus.com/posts/2019-09-03-aspnetmvc5-asset-versioning-url-helper</id>
		<title>Versioning Content URLs in ASP.NET MVC 5</title>
		<updated>2019-09-04T01:37:00Z</updated>
		<content>&lt;p&gt;I just published a new Nuget package, &lt;a href="https://www.nuget.org/packages/AspNet.Mvc.AssetVersioning"&gt;AspNet.Mvc.AssetVersioning&lt;/a&gt;. This package extends the MVC5 &lt;code&gt;&amp;#64;Url&lt;/code&gt; Razor helper with a new &lt;code&gt;VersionedContent&lt;/code&gt; method
which appends a Base64-encoded SHA256 hash to the end of the URL for cache-busting.&lt;/p&gt;
&lt;h2 id="versioning-in-asp.net-core"&gt;Versioning in ASP.NET Core&lt;/h2&gt;
&lt;p&gt;In ASP.NET Core, you can version URLs using the &lt;a href="https://docs.microsoft.com/en-us/aspnet/core/mvc/views/tag-helpers/built-in/image-tag-helper?view=aspnetcore-2.2#asp-append-version"&gt;&lt;code&gt;asp-append-version&lt;/code&gt; tag helper&lt;/a&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-html"&gt;&amp;lt;script src=&amp;quot;~/scripts/foo.js&amp;quot; type=&amp;quot;text/javascript&amp;quot; asp-append-version=&amp;quot;true&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Which will output:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-html"&gt;&amp;lt;script src=&amp;quot;/scripts/foo.js?v=hash&amp;quot; type=&amp;quot;text/javascript&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="versioning-in-asp.net-mvc-5"&gt;Versioning in ASP.NET MVC 5&lt;/h2&gt;
&lt;p&gt;Since I have not yet migrated to ASP.NET Core for &lt;a href="https://ktomg.com"&gt;Keep Track of My Games&lt;/a&gt;, I needed the same functionality in order to remove some old libraries that are not available in .NET Core. Now you can achieve the same thing using my &lt;a href="https://www.nuget.org/packages/AspNet.Mvc.AssetVersioning"&gt;package&lt;/a&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-html"&gt;&amp;#64;using System.Web.Mvc.AssetVersioning;

&amp;lt;script src=&amp;quot;&amp;#64;Url.VersionedContent(&amp;quot;~/scripts/foo.js&amp;quot;)&amp;quot; type=&amp;quot;text/javascript&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will output the following:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-html"&gt;&amp;lt;script src=&amp;quot;/scripts/foo?base64-encoded-hash&amp;quot; type=&amp;quot;text/javascript&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The helper will automatically cache hashes for files for the lifetime of the &lt;code&gt;HttpContext&lt;/code&gt;. So, basically, for the lifetime of the application pool. Restart the site/app pool to refresh the cache, which should happen on any new deployments.&lt;/p&gt;
&lt;p&gt;You can simplify the &lt;code&gt;&amp;#64;using&lt;/code&gt; statement usage by adding the namespace to the &lt;code&gt;/configuration/system.web.webPages.razor/pages/namespaces&lt;/code&gt; section in the &lt;code&gt;Views/web.config&lt;/code&gt; file, as outlined in the GitHub repo &lt;a href="https://github.com/kamranayub/aspnetmvc5-asset-versioning"&gt;README&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Hope this helps someone else facing the same issue!&lt;/p&gt;
</content>
		<summary>&lt;p&gt;I just published a new Nuget package, &lt;a href="https://www.nuget.org/packages/AspNet.Mvc.AssetVersioning"&gt;AspNet.Mvc.AssetVersioning&lt;/a&gt;. This package extends the MVC5 &lt;code&gt;@Url&lt;/code&gt; Razor helper with a new &lt;code&gt;VersionedContent&lt;/code&gt; method
which appends a Base64-encoded SHA256 hash to the end of the URL for cache-busting.&lt;/p&gt;</summary>
	</entry>
	<entry>
		<link href="https://kamranicus.com/posts/2019-08-12-pluralsight-guide-testing-react-typescript-jest" />
		<id>https://kamranicus.com/posts/2019-08-12-pluralsight-guide-testing-react-typescript-jest</id>
		<title>New Pluralsight Guide: How to Test React Components in TypeScript</title>
		<updated>2019-08-13T03:27:00Z</updated>
		<content>&lt;p&gt;I just published my fourth Pluralsight guide: &lt;a href="https://pluralsight.pxf.io/7VVBV"&gt;How to Test React Components in TypeScript&lt;/a&gt;. I cover how to configure Jest with TypeScript and bootstrap React Testing Library.&lt;/p&gt;
</content>
		<summary>&lt;p&gt;I just published my fourth Pluralsight guide: &lt;a href="https://pluralsight.pxf.io/7VVBV"&gt;How to Test React Components in TypeScript&lt;/a&gt;. I cover how to configure Jest with TypeScript and bootstrap React Testing Library.&lt;/p&gt;</summary>
	</entry>
	<entry>
		<link href="https://kamranicus.com/posts/2019-07-12-quarterly-2-update" />
		<id>https://kamranicus.com/posts/2019-07-12-quarterly-2-update</id>
		<title>2019 Goals Quarterly Update (Q2)</title>
		<updated>2019-07-12T14:00:00Z</updated>
		<content>&lt;p&gt;OK, we have already reached Q2 2019! Right smack in the middle of summer. Not long ago, &lt;a href="https://kamranicus.com/posts/2019-04-28-quarterly-1-update"&gt;I posted my first quarterly update&lt;/a&gt; and promised to also send the first quarterly newsletter &lt;em&gt;this quarter&lt;/em&gt;. Well, &lt;a href="https://kamranicus.com/newsletter"&gt;if you've subscribed&lt;/a&gt; you should have a fresh email soon in your inbox which includes a ton of interesting links and some content that is &lt;em&gt;not&lt;/em&gt; included in this post (hey, I have to add value somehow!).&lt;/p&gt;
&lt;h2 id="progress-on-yearly-goals"&gt;Progress on yearly goals&lt;/h2&gt;
&lt;p&gt;Let's see what updates there have been to my goals. To make it easy, I've only included &lt;em&gt;new updates&lt;/em&gt;, so check out &lt;a href="https://kamranicus.com/posts/2019-04-28-quarterly-1-update"&gt;Q1 for a review&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id="primary-goals"&gt;Primary Goals&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Professional&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;✅ Publish 4 Pluralsight guides on React &amp;amp; TypeScript by May
&lt;ul&gt;
&lt;li&gt;I was just approved to write my 4th Pluralsight guide. Yes! It'll be out in August.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;✅ Speak at NDC MN on a TypeScript topic
&lt;ul&gt;
&lt;li&gt;I spoke! You can &lt;a href="https://www.youtube.com/watch?v=mIejhIX7ObE"&gt;watch the recording on YouTube&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;⌛ Publish 5 technical articles on the blog about Azure, TypeScript, or React
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;1 of 5 down.&lt;/em&gt; I recently wrote about &lt;a href="https://kamranicus.com/posts/2019-06-26-typescript-safe-destructuring-patterns"&gt;Handling Safe Destructuring in TypeScript&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Personal&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;☑️ Passive income should account for 2% of earnings, 1099 income for 5%
&lt;ul&gt;
&lt;li&gt;Partially complete!&lt;/li&gt;
&lt;li&gt;Passive income as a % of W-2: &lt;strong&gt;3.3%&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;1099 income as a % of W-2: &lt;strong&gt;2.3%&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Total side earnings:&lt;/strong&gt; 5.6%!&lt;/li&gt;
&lt;li&gt;This is awesome for not pursuing some more lucrative gigs this year so far. I've been focusing on monetizing KTOMG which has an opportunity cost but for me it's definitely worth doing.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;✅ Replace my PCs at home with a single good Ultrabook/Notebook and a NAS
&lt;ul&gt;
&lt;li&gt;Marking as done; no need to get a NAS, I just upgraded to two 1TB SSDs.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;⌛ Push 3 substantive updates to KTOMG throughout the year: Steam review revamp, Raven 4 upgrade, and Linux hosting
&lt;ul&gt;
&lt;li&gt;Migration completed to RavenDB 4 and the IGDB migration &lt;a href="https://twitter.com/keeptrackgames/status/1143354095027347457"&gt;is nearly complete&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;DIY&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;✅ &lt;del&gt;Learn how to cut trim/baseboard and&lt;/del&gt; finish the nursery
&lt;ul&gt;
&lt;li&gt;Let's leave this at just paint since I decided to leave the trim.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="stretch-goals"&gt;Stretch Goals&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Professional&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;✅ Set up a quarterly newsletter
&lt;ul&gt;
&lt;li&gt;Done! Sign up below or at &lt;a href="https://kamranicus.com/newsletter"&gt;https://kamranicus.com/newsletter&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;DIY&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;⛔ &lt;del&gt;Install luxury vinyl plank in my office&lt;/del&gt;
&lt;ul&gt;
&lt;li&gt;I think this will move to next year; &lt;a href="https://twitter.com/kamranayub/status/1143369429469880320"&gt;I did research&lt;/a&gt; and picked out some styles, did a cost estimate, but I don't think I'll get to it this year unless I do it during winter.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;⛔ &lt;del&gt;Replace baseboard/trim in my son's bedroom&lt;/del&gt; Paint son's bedroom trim.
&lt;ul&gt;
&lt;li&gt;I don't think I need to replace it; I may still paint it, though.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="unplanned-accomplishments"&gt;Unplanned Accomplishments&lt;/h2&gt;
&lt;h3 id="professional"&gt;Professional&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Invited to speak.&lt;/strong&gt; This year was my first year where I was &lt;em&gt;invited to speak&lt;/em&gt; at a conference. I'll be at MDC in October talking about building flexible UIs again (an updated version &lt;a href="https://www.youtube.com/watch?v=mIejhIX7ObE"&gt;of my NDC talk&lt;/a&gt;). I also was invited to speak at the .NET User Group where I spoke about RavenDB 4 (video forthcoming).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;New role at work.&lt;/strong&gt; I was promoted to Lead Engineer and joined the &lt;a href="https://target.com"&gt;Target.com&lt;/a&gt; web platform team. That means I'm actively working behind-the-scenes to make Target.com faster and better for you. I think if I add up all the performance optimizations I've made across the site, it's up in the 2-3 second range which is HUGE. It's pretty fun and I'm surrounded by way smarter people than me which I really enjoy.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;More writing.&lt;/strong&gt; In the last update, I mentioned I wrote an article about RavenDB indexes and that I had a second article in the works. Well, I published &lt;a href="https://www.codeproject.com/Articles/4553133/Whats-New-in-RavenDB-4-2"&gt;What's New in RavenDB 4.2&lt;/a&gt; in May! I also posted a non-freelance article on &lt;a href="https://kamranicus.com/posts/2019-05-22-ravendb-devops-automation-with-ansible"&gt;Automating RavenDB 4 with Ansible&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="personal"&gt;Personal&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;New blog.&lt;/strong&gt; Starting a brand new DIY/crafts-focused blog with my wife, who loves to knit and sew. I focus on home projects and she makes awesome things for us to wear. I'll have more to announce soon.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="diy"&gt;DIY&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;✅ Completed &lt;a href="https://twitter.com/kamranayub/status/1145410649121538048"&gt;a DIY window egress cover&lt;/a&gt;. I'm super happy with how it turned out. Guide forthcoming in Q3, which will be posted on the new blog 👌.&lt;/li&gt;
&lt;li&gt;⌛ Cassie and I are refinishing an old dresser for our daughter, Saira. Progress will be posted on the new blog.&lt;/li&gt;
&lt;li&gt;✅ Cassie completed her own DIY projects of repainting &lt;strong&gt;two&lt;/strong&gt; old stools!&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="final-thoughts"&gt;Final thoughts&lt;/h2&gt;
&lt;p&gt;Q2 went by quickly! We are in the dog days of summer and enjoying it quite a bit. Lots of trips, lots of friends, and still managing to hack away at projects and earn some side coin. The DIY stuff has been a lot of fun and I've appreciated learning new skills. Plus it's fun to work on shared projects with my wife!&lt;/p&gt;
</content>
		<summary>&lt;p&gt;OK, we have already reached Q2 2019! Right smack in the middle of summer. Not long ago, &lt;a href="https://kamranicus.com/posts/2019-04-28-quarterly-1-update"&gt;I posted my first quarterly update&lt;/a&gt; and promised to also send the first quarterly newsletter &lt;em&gt;this quarter&lt;/em&gt;. Well, &lt;a href="https://kamranicus.com/newsletter"&gt;if you've subscribed&lt;/a&gt; you should have a fresh email soon in your inbox which includes a ton of interesting links and some content that is &lt;em&gt;not&lt;/em&gt; included in this post (hey, I have to add value somehow!).&lt;/p&gt;</summary>
	</entry>
	<entry>
		<link href="https://kamranicus.com/posts/2019-06-26-typescript-safe-destructuring-patterns" />
		<id>https://kamranicus.com/posts/2019-06-26-typescript-safe-destructuring-patterns</id>
		<title>Handling Safe Destructuring in TypeScript</title>
		<updated>2019-06-26T13:00:00Z</updated>
		<content>&lt;p&gt;When migrating from JavaScript to TypeScript, you will often run into scenarios that seem difficult to statically type related to destructuring objects.&lt;/p&gt;
&lt;h2 id="destructuring-an-empty-object"&gt;Destructuring an empty object&lt;/h2&gt;
&lt;p&gt;This pattern is showcased using the following code snippet, which is not actual code but &lt;em&gt;does&lt;/em&gt; reflect the semantics of the actual code we reviewed:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;function transformSearchResults(payload = {}, queryParams = {}) {
  const { results } = payload;
  const { searchTerm } = queryParams;

  if (!results) {
    return payload;
  }

  if (searchTerm &amp;amp;&amp;amp; isSearchPayload(payload)) {
    payload.transformedResults = results.map(r =&amp;gt; ({
      ...r,
      anotherProp: true
    }));
  }

  return payload;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This function essentially takes a payload, transforms it, and returns the modified payload object.&lt;/p&gt;
&lt;p&gt;Specifically, notice in the function arguments the expressions &lt;code&gt;= {}&lt;/code&gt; which in JavaScript will set a default value of &lt;code&gt;{}&lt;/code&gt; for the parameter if it is &lt;code&gt;undefined&lt;/code&gt;. This is done because on the next 2 lines, we attempt to destructure and pull out some key props of the objects. If &lt;code&gt;payload&lt;/code&gt; or &lt;code&gt;queryParams&lt;/code&gt; is &lt;code&gt;undefined&lt;/code&gt; then the destructuring would blow up and &lt;em&gt;we don't want this code to blow up.&lt;/em&gt; That is pretty reasonable!&lt;/p&gt;
&lt;h2 id="converting-to-typescript"&gt;Converting to TypeScript&lt;/h2&gt;
&lt;p&gt;If we want to migrate this function to TypeScript, it would make sense to add a type annotation for each parameter like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-typescript"&gt;export interface ResponsePayload {
  results: SearchResult[] | OtherResult[];
}

function transformSearchResults(
  payload: ResponsePayload = {},
  queryParams: QueryStringParams = {}
)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We are trying to annotate our types properly by telling TypeScript what types we expect these parameters to be. We've declared our API type &lt;code&gt;ResponsePayload&lt;/code&gt; with a &lt;code&gt;results&lt;/code&gt; property.&lt;/p&gt;
&lt;p&gt;But alas, TypeScript will throw an error immediately:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Property 'results' is missing in type '{}' but required in type 'ResponsePayload'. ts(2741)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;While this might seem wrong at first on the surface, TypeScript is actually pointing out a &lt;em&gt;code smell&lt;/em&gt; in this function.&lt;/p&gt;
&lt;p&gt;The reason that TypeScript doesn't allow this is because the &lt;code&gt;ResponsePayload&lt;/code&gt; type has a &lt;code&gt;results&lt;/code&gt; property that is &lt;em&gt;required&lt;/em&gt; (cannot be undefined). We know this because we typed it that way, presumably because the API doesn't return undefined. If it did, we could change &lt;code&gt;results&lt;/code&gt; to be optional.&lt;/p&gt;
&lt;p&gt;When converting destructuring code to TypeScript, you will be encouraged to consider the code more critically than before, otherwise you will run into type errors.&lt;/p&gt;
&lt;p&gt;Here's what I ask in this situation:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Can the function be simplified to pass a specific primitive value for the parameter?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If I need to pass an object, can I refactor the function to avoid it?&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;These questions are dependent on the specific case but in the &lt;em&gt;majority&lt;/em&gt; of cases, you can usually remove the need to destructure by asking these questions.&lt;/p&gt;
&lt;p&gt;For example, let's take it step-by-step.&lt;/p&gt;
&lt;h2 id="simplifying-function-parameters"&gt;Simplifying Function Parameters&lt;/h2&gt;
&lt;blockquote class="blockquote"&gt;
&lt;p&gt;Can the function be simplified to pass a specific primitive value for the parameter?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Here's the code again:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-typescript"&gt;function transformSearchResults(
  payload: ResponsePayload = {}, 
  queryParams: QueryStringParams = {}) 
{
  const { results } = payload;
  const { searchTerm } = queryParams;

  if (!results) {
    return payload;
  }

  if (searchTerm &amp;amp;&amp;amp; isSearchPayload(payload)) {
    payload.transformedResults = results.map(r =&amp;gt; ({
      ...r,
      anotherProp: true
    }));
  }

  return payload;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A quick look will tell us that the answer is &lt;strong&gt;No&lt;/strong&gt; for &lt;code&gt;payload&lt;/code&gt; but &lt;strong&gt;Yes&lt;/strong&gt; for &lt;code&gt;queryParams&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Only &lt;code&gt;results&lt;/code&gt; in &lt;code&gt;payload&lt;/code&gt; is used but &lt;code&gt;payload&lt;/code&gt; is also being mutated, so the function needs the object passed, let's set that aside.&lt;/p&gt;
&lt;p&gt;For &lt;code&gt;queryParams&lt;/code&gt;, only &lt;code&gt;searchTerm&lt;/code&gt; is actually referenced, so let's simplify this function to pass only that:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-typescript"&gt;function transformSearchResults(
  payload: ResponsePayload = {}, 
  searchTerm?: string) 
{
  const { results } = payload;

  if (!results) {
    return payload;
  }

  if (searchTerm &amp;amp;&amp;amp; isSearchPayload(payload)) {
    payload.transformedResults = results.map(r =&amp;gt; ({
      ...r,
      anotherProp: true
    }));
  }

  return payload;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Great! The rest of the code remains the same and we eliminated one unnecessary destructuring.&lt;/p&gt;
&lt;h2 id="approaches-to-refactoring-for-destructuring"&gt;Approaches to Refactoring for Destructuring&lt;/h2&gt;
&lt;blockquote class="blockquote"&gt;
&lt;p&gt;If I need to pass an object, can I refactor the function to avoid it?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Right now the function requires &lt;code&gt;payload&lt;/code&gt; to be provided directly. There are two approaches we could now take:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Specifying a default value for required properties&lt;/li&gt;
&lt;li&gt;Removing the need to mutate an object so we can just pass &lt;code&gt;results&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="providing-default-values-for-properties"&gt;Providing default values for properties&lt;/h3&gt;
&lt;p&gt;If we intend to keep the logic in the function intact, we need to provide a value for all required properties of &lt;code&gt;ResponsePayload&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;We can do this inline within the function which works well for a small list of parameters:.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-typescript"&gt;function transformSearchResults(
  payload: ResponsePayload = { results: [] }, 
  searchTerm?: string)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;All fixed; since we provide a default value for &lt;code&gt;results&lt;/code&gt; which isn't &lt;code&gt;undefined&lt;/code&gt; TypeScript is happy.&lt;/p&gt;
&lt;p&gt;We could also choose to provide a default object for more complex situations:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-typescript"&gt;const defaultPayload: ResponsePayload = {
  results: []
};

function transformSearchResults(
  payload: ResponsePayload = defaultPayload, 
  searchTerm?: string)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This works just as well but introduces a dangling object that might not add a ton of value. Can we remove the need for providing &lt;code&gt;payload&lt;/code&gt; in the first place?&lt;/p&gt;
&lt;h3 id="removing-the-object-altogether"&gt;Removing the object altogether&lt;/h3&gt;
&lt;p&gt;The fact that the function mutates the original incoming object is a smell itself. There are cases where that makes sense but in this case, we are transforming results--we should just return the newly mapped results and &lt;em&gt;push the concern of mutating &lt;code&gt;payload&lt;/code&gt;&lt;/em&gt; to a higher-level.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-typescript"&gt;function transformSearchResults(
  results: SearchResults[] | OtherResults[], 
  searchTerm?: string) 
{
  if (searchTerm &amp;amp;&amp;amp; isSearchPayload(payload)) {
    return results.map(r =&amp;gt; ({
      ...r,
      anotherProp: true
    }));
  }

  return results;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;Nearly there.&lt;/em&gt; We will now receive an error because &lt;code&gt;isSearchPayload&lt;/code&gt; was testing the payload itself. We have two options:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Modify &lt;code&gt;isSearchPayload&lt;/code&gt; to inspect results&lt;/li&gt;
&lt;li&gt;Push the concern of checking payload higher&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;We could certainly do option 1 but I like option 2 better. It will end up simplifying the &lt;code&gt;results&lt;/code&gt; typing even more because we can &lt;em&gt;know&lt;/em&gt; the results are &lt;em&gt;search results&lt;/em&gt;! This also makes the function name much more accurate:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-typescript"&gt;function transformSearchResults(
  results: SearchResults[], 
  searchTerm?: string) 
{
  if (searchTerm) {
    return results.map(r =&amp;gt; ({
      ...r,
      anotherProp: true
    }));
  }

  return results;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There we go; we've totally removed the need for destructuring with this function by simplifying the requirements and avoiding mutation of objects.&lt;/p&gt;
&lt;h3 id="where-did-the-complexity-go"&gt;Where did the complexity go?&lt;/h3&gt;
&lt;p&gt;By refactoring the function we pushed two concerns higher in the call stack:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Is this a search payload (&lt;code&gt;isSearchPayload&lt;/code&gt;)?&lt;/li&gt;
&lt;li&gt;Handling &lt;code&gt;transformedResults&lt;/code&gt; for &lt;code&gt;payload&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;That logic still has to exist somewhere but now it can be lifted higher. There is a principle at work here called the &lt;a href="https://en.wikipedia.org/wiki/Command%E2%80%93query_separation"&gt;Command-Query Separation&lt;/a&gt; principle, which says:&lt;/p&gt;
&lt;blockquote class="blockquote"&gt;
&lt;p&gt;&amp;quot;every method should either be a command that performs an action, or a query that returns data to the caller, but not both. In other words, &lt;strong&gt;Asking a question should not change the answer.&lt;/strong&gt;&amp;quot;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Before we refactored this function, it violated this principle because it both &lt;em&gt;returned new results&lt;/em&gt; (a query) &lt;strong&gt;and&lt;/strong&gt; had a side effect by mutating the object (a command). Now we've refactored it into a &amp;quot;query&amp;quot; function only.&lt;/p&gt;
&lt;p&gt;If we had inspected the previous way this function was called, you would have seen this:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;function (payload?: ResponsePayload) {
  if (!payload) {
    throw new Error(&amp;quot;Missing response payload!&amp;quot;);
  }

  payload = transformSearchResults(payload, queryParams);

  return payload;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This should raise a yellow flag since it is returning the object again which implies it may be mutating it (in other words, &amp;quot;it smells&amp;quot;).&lt;/p&gt;
&lt;p&gt;Now that we've refactored the function above, some responsibilities have been pushed higher, which may result in a change like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-typescript"&gt;function (payload?: ResponsePayload) {
  if (!payload) {
    throw new Error(&amp;quot;Missing response payload!&amp;quot;);
  }

  if (isSearchPayload(payload)) {
    return {
      ...payload,
      transformedResults: transformSearchResults(payload.results)
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We avoid mutating the payload directly instead opting to merge the new property in. We now have options to extract this logic, refactor it, etc. which you can decide!&lt;/p&gt;
&lt;h2 id="handling-nested-destructuring"&gt;Handling Nested Destructuring&lt;/h2&gt;
&lt;p&gt;If we're able to remove the need to destructure by simplifying functions that is a win but what if we really need to safely destructure and more specifically, in a nested way?&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-javascript"&gt;function handleData(data = {}) {
  const { meta: { field1, field2, field3 } = {} } = data;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is slightly more complicated and subsequently harder to type &lt;em&gt;and it should be&lt;/em&gt;. One thing I have come to appreciate about TypeScript is that it makes you feel the pain a little more which in turn encourages you to take a step back and question why the code is structured the way it is.&lt;/p&gt;
&lt;p&gt;In this example, we can ask the same question we originally asked: &lt;em&gt;Do we really need &lt;code&gt;data&lt;/code&gt; or can we be more specific?&lt;/em&gt;&lt;/p&gt;
&lt;h3 id="keeping-data"&gt;Keeping &lt;code&gt;data&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Let's say we must keep &lt;code&gt;data&lt;/code&gt; as a parameter. If &lt;code&gt;meta&lt;/code&gt; and all the &lt;code&gt;field*&lt;/code&gt; properties &lt;em&gt;can truly be &lt;code&gt;undefined&lt;/code&gt;&lt;/em&gt; and are marked as so, this code will work.&lt;/p&gt;
&lt;p&gt;As soon as one of them is non-optional, TypeScript will throw an error since we haven't provided defaults.&lt;/p&gt;
&lt;p&gt;For example, let's say &lt;code&gt;data&lt;/code&gt; is typed as:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-typescript"&gt;interface Data {
  meta: Metadata
}

interface Metadata {
  field1: string;
  field2: boolean;
  field3: object;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;meta&lt;/code&gt; is not optional, it must be provided so the code above will throw an error as no default &lt;code&gt;meta&lt;/code&gt; value is provided and neither are the &lt;code&gt;field*&lt;/code&gt; defaults. Yikes!&lt;/p&gt;
&lt;p&gt;The best approach is to do a refactoring like we did above to simplify the parameters, if possible.&lt;/p&gt;
&lt;p&gt;The next best thing is to &lt;em&gt;remove the default&lt;/em&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-typescript"&gt;function handleData(data: Data) {
  const { meta: { field1, field2, field3 } } = data;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This matches how we've described the types -- that no property can be &lt;code&gt;undefined&lt;/code&gt; so there's no &lt;em&gt;reason&lt;/em&gt; to use a default parameter anymore. If this matches what you expect, there's nothing additional to do.&lt;/p&gt;
&lt;p&gt;What if in practice, things could potentially be &lt;code&gt;undefined&lt;/code&gt; but we still want to ensure the types remain &amp;quot;pure&amp;quot;?&lt;/p&gt;
&lt;p&gt;Then we should push the &amp;quot;guarding&amp;quot; of potentially &lt;code&gt;undefined&lt;/code&gt; values higher up the stack:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-typescript"&gt;function checkData(data: Data | undefined) {
  if (!data) {
    throw new Error(&amp;quot;Data shouldn't be undefined&amp;quot;);
  }

  return handleData(data); // No longer can be undefined
}

function handleData(data: Data) {

  // This is safe to do now
  const { meta: { field1, field2, field3 } } = data;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In general, you should guard as close to the source as possible. This keeps downstream functions simpler and with TypeScript, you can ensure they get passed values that don't &lt;em&gt;need&lt;/em&gt; defaults to be provided.&lt;/p&gt;
&lt;h3 id="supporting-partial-objects"&gt;Supporting partial objects&lt;/h3&gt;
&lt;p&gt;Let's assume that &lt;code&gt;meta&lt;/code&gt; fields &lt;em&gt;can&lt;/em&gt; be partially available, we can simplify and statically type the function like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-typescript"&gt;interface Data {
  meta: Partial&amp;lt;Metadata&amp;gt;
}

interface Metadata {
  field1: string;
  field2: boolean;
  field3: object;
}

function (data: Data) {

  // This is safe now as `meta` can be partially undefined
  const { meta: { field1, field2, field3 } = {} } = data;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we've &lt;em&gt;explicitly&lt;/em&gt; declared that &lt;code&gt;meta&lt;/code&gt; can be partially defined. This does two things:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;it allows the safe destructuring without compiler errors and,&lt;/li&gt;
&lt;li&gt;it tells the reader to &lt;em&gt;expect&lt;/em&gt; to guard against partially defined fields.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Static types are documentation and now we've called out to expect that &lt;code&gt;meta&lt;/code&gt; can have partial fields. It also allows us to safely set the default object to &lt;code&gt;{}&lt;/code&gt; to avoid errors while destructuring.&lt;/p&gt;
&lt;h2 id="the-last-resort-type-assertions"&gt;The last resort: type assertions&lt;/h2&gt;
&lt;p&gt;There is a hammer we can use as a last resort. If we can't effectively refactor out destructuring or if we really need to force this pattern to avoid changing code, we can use type assertions:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-typescript"&gt;function transformSearchResults(
  payload = {} as ResponsePayload,
  queryParams = {} as QueryStringParams
)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will force TS to treat the empty object &lt;em&gt;as&lt;/em&gt; the types we want--but this introduces potential for bugs as now we are opting out of the type safety. We are putting the responsibility of checking for &lt;code&gt;undefined&lt;/code&gt; on the developer writing the function vs. the TypeScript compiler.&lt;/p&gt;
&lt;p&gt;If you do this with ESLint rules enabled, you'll be greeted with an error:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Type assertion on object literals is forbidden, 
use a type annotation instead. 
eslint(&amp;#64;typescript-eslint/no-object-literal-type-assertion)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Again this is because it's best to &lt;em&gt;avoid this&lt;/em&gt; in the first place. In order to get this to compile, you'll need to disable the error:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-typescript"&gt;/*  eslint-disable-next-line &amp;#64;typescript-eslint/no-object-literal-type-assertion */
function transformSearchResults(
  payload = {} as ResponsePayload,
  queryParams = {} as QueryStringParams
)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;At least now, you can later search for these disabled errors as an indication to revisit and refactor later.&lt;/p&gt;
&lt;h2 id="summary"&gt;Summary&lt;/h2&gt;
&lt;p&gt;When migrating to TypeScript, you will run into a lot of issues like this that on the surface feel like you're battling the type system but what I hoped to get across is that &lt;em&gt;TypeScript is forcing you to think more explicitly about how your code is structured and what your intent is.&lt;/em&gt; It will force you to look &lt;em&gt;beyond&lt;/em&gt; the scope of a single function and think more holistically about usage and context.&lt;/p&gt;
&lt;p&gt;When you find yourself trying to disable rules or workaround TypeScript errors through type assertions, you need to take a step back and ask:&lt;/p&gt;
&lt;blockquote class="blockquote"&gt;
&lt;p&gt;Is this the best way to structure this code or is TypeScript hinting that I may need to refactor it?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This type of mindset is a &lt;em&gt;shift in thinking&lt;/em&gt; when working with TypeScript, especially when you've come from JavaScript. It may be painful at first but ultimately it will lead to better, hopefully simpler code.&lt;/p&gt;
&lt;p&gt;If you're interested in furthering your understanding of principles like Command-Query Separation and refactoring code, I highly recommend the &lt;a href="https://app.pluralsight.com/library/courses/encapsulation-solid/table-of-contents"&gt;Encapsulation and SOLID course&lt;/a&gt; by Mark Seeman from Pluralsight.&lt;/p&gt;
&lt;p&gt;You can also check out my &lt;a href="https://dev.to/kamranayub/how-to-get-started-using-react-with-typescript-21c"&gt;collection of React and TypeScript content&lt;/a&gt;!&lt;/p&gt;
</content>
		<summary>&lt;p&gt;When migrating from JavaScript to TypeScript, you will often run into scenarios that seem difficult to statically type related to destructuring objects.&lt;/p&gt;</summary>
	</entry>
	<entry>
		<link href="https://kamranicus.com/posts/2019-05-22-ravendb-devops-automation-with-ansible" />
		<link rel="enclosure" type="image" href="https://kamranicus.com/images/2019-05-22-masthead.jpg" />
		<id>https://kamranicus.com/posts/2019-05-22-ravendb-devops-automation-with-ansible</id>
		<title>Automating RavenDB 4 with Ansible</title>
		<updated>2019-05-23T01:31:00Z</updated>
		<content>&lt;p&gt;I've finished migrating my database infrastructure for &lt;a href="https://ktomg.com"&gt;Keep Track of My Games&lt;/a&gt; from &lt;a href="https://ravendb.net"&gt;RavenDB&lt;/a&gt; 3.5 to 4.1 (&lt;a href="https://ravendb.net/features/ravendb-42-features"&gt;and soon, 4.2&lt;/a&gt;!).&lt;/p&gt;
&lt;h2 id="summary"&gt;Summary&lt;/h2&gt;
&lt;p&gt;I thought I'd take a moment to lay out how I used &lt;a href="http://ansible.com"&gt;Ansible&lt;/a&gt;, a popular configuration automation tool, to stand up my RavenDB servers with a bit less manual work and to maintain easy upgrades.&lt;/p&gt;
&lt;p&gt;Since I &lt;a href="https://www.vultr.com/?ref=7006849"&gt;use Vultr for hosting as it's fast and cheap&lt;/a&gt; I decided to &amp;quot;do it right&amp;quot; and plan for the future architecture of KTOMG which I hope to work towards this year, namely hosting on Linux only and cutting a ton of cost from my monthly hosting bill.&lt;/p&gt;
&lt;p&gt;I believe it's important to treat your servers &lt;a href="https://medium.com/&amp;#64;Joachim8675309/devops-concepts-pets-vs-cattle-2380b5aab313"&gt;like cattle, not pets&lt;/a&gt;. Unfortunately, when I originally set up KTOMG on my Vultr VMs I didn't follow my own advice (remember dear reader: Do as I &lt;em&gt;say&lt;/em&gt; not as I &lt;em&gt;do&lt;/em&gt;). I had no automation scripts or configuration management, it was entirely bespoke (with documented steps, granted). I have used &lt;a href="http://ansible.com"&gt;Ansible&lt;/a&gt; in the past and knew it would be a good fit for configuring my new RavenDB VMs.&lt;/p&gt;
&lt;h2 id="preparing-the-vm"&gt;Preparing the VM&lt;/h2&gt;
&lt;p&gt;In order to execute Ansible in the first place, I needed to set up a fresh Ubuntu VM on Vultr. Typically, you don't want to just run as &lt;code&gt;root&lt;/code&gt; for everything in Linux. Instead, you set up dedicated users with permissions to do the things you need. This is the &lt;a href="https://en.wikipedia.org/wiki/Principle_of_least_privilege"&gt;principle of least privilege&lt;/a&gt;. I followed the steps outlined in this &lt;a href="https://www.vultr.com/docs/initial-secure-server-configuration-of-ubuntu-18-04"&gt;basic guide to securing Ubuntu 18.04&lt;/a&gt; to set up a deployment user (&lt;code&gt;deploy&lt;/code&gt;) with appropriate permissions and lock down SSH.&lt;/p&gt;
&lt;p&gt;In Vultr as well I created &lt;a href="https://www.vultr.com/docs/vultr-firewall"&gt;a Firewall group&lt;/a&gt; for the databases that allows my custom SSH port through (from specific IPs) which provides another layer of security.&lt;/p&gt;
&lt;p&gt;The last thing I did was &lt;a href="https://www.ubuntu.com/livepatch"&gt;enable Canonical Live Patch&lt;/a&gt; to hotpatch the servers without rebooting, which is free for 3 servers. I did try to set up unattended upgrades with Ansible but was running into strange apt locking issues.&lt;/p&gt;
&lt;p&gt;Much of this VM setup could be automated at least partially with VM Startup Scripts, a feature Vultr offers. Since it only takes a couple minutes and I only have a few VMs, I didn't bother with that step.&lt;/p&gt;
&lt;p&gt;Once you test logging in via SSH with your new &lt;code&gt;deploy&lt;/code&gt; user, you can configure Ansible to do the same.&lt;/p&gt;
&lt;h2 id="setting-up-your-inventory"&gt;Setting Up Your Inventory&lt;/h2&gt;
&lt;p&gt;Ansible has the idea of an &lt;a href="https://docs.ansible.com/ansible/latest/user_guide/intro_inventory.html"&gt;inventory&lt;/a&gt; which is the sets of servers to configure. You can group them and provide ansible variables to each one as-needed.&lt;/p&gt;
&lt;p&gt;Ansible also supports &lt;a href="https://docs.ansible.com/ansible/latest/user_guide/intro_dynamic_inventory.html"&gt;dynamic inventory&lt;/a&gt; and &lt;a href="https://docs.ansible.com/ansible/latest/scenario_guides/guide_vultr.html"&gt;even supports Vultr&lt;/a&gt; as a source! I opted to not do this, again due to the limited number of VMs I needed to configure.&lt;/p&gt;
&lt;p&gt;The inventory file looks something like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[dbservers]
10.0.0.1 
10.0.0.2

[dbservers:vars]
ansible_port=12345
ansible_user=deploy
ansible_become_user=ravensu
ansible_become_method=su
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Each node is listed that you wish to configure followed by some shared &amp;quot;group&amp;quot; variables that you want to provide to Ansible (they are shared for each node, see &lt;a href="https://docs.ansible.com/ansible/latest/user_guide/playbooks_variables.html#ansible-variable-precedence"&gt;variable precedence&lt;/a&gt;). In this case, we are connecting as the user &lt;code&gt;deploy&lt;/code&gt; on a custom SSH port.&lt;/p&gt;
&lt;p&gt;What is &lt;code&gt;ansible_become_user&lt;/code&gt;? For the playbook we'll use, most if not all the tasks requires sudo permissions to configure. The way I accomplish this is by ensuring I &lt;em&gt;connect&lt;/em&gt; via SSH with my approved user (&lt;code&gt;deploy&lt;/code&gt;) who has low permissions, then at playbook runtime specify Ansible to &lt;a href="https://docs.ansible.com/ansible/latest/user_guide/become.html"&gt;become&lt;/a&gt; a sudo user (&lt;code&gt;ravensu&lt;/code&gt;) to execute any privileged tasks.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; The &lt;code&gt;ansible_become_method=su&lt;/code&gt; was the only option that worked for me against my Vultr VMs and I'm unsure why. The default is &lt;code&gt;sudo&lt;/code&gt; but that wasn't working!&lt;/p&gt;
&lt;h2 id="creating-the-playbook"&gt;Creating the Playbook&lt;/h2&gt;
&lt;p&gt;In my example playbook, I only do a handful of tasks to set up a server. Possibly in the future, it'd be nice to even automate some of the cluster setup tasks you need to perform for Raven, scripted using the HTTP API. &lt;strong&gt;Bonus points:&lt;/strong&gt; Make a formal Ansible role!&lt;/p&gt;
&lt;p&gt;At a high-level, the playbook does the following:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Install Docker on Linux&lt;/li&gt;
&lt;li&gt;Copy RavenDB settings and certificates to the remote machine&lt;/li&gt;
&lt;li&gt;Start a RavenDB 4 container with the appropriate volume mounts, networking configuration and environment variables set&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;View the playbook in my &lt;a href="https://github.com/kamranayub/ravendb-devops/blob/master/ansible/ravendb.yml"&gt;ravendb-devops&lt;/a&gt; repository.&lt;/p&gt;
&lt;p&gt;I want to touch on a few key configuration settings:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Port Mapping:&lt;/strong&gt; The &lt;code&gt;published_ports&lt;/code&gt; maps the VM host ports (8081, 38889) to the container ports Raven will bind to (8080, 38888). I don't &lt;em&gt;think&lt;/em&gt; they need to be different but in experimenting with setting up Raven I ended up using different ports.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Settings:&lt;/strong&gt; I am providing a custom &lt;code&gt;settings.json&lt;/code&gt; file from the host machine. This contains pre-set config with IP addresses or DNS for what URLs to bind to and other server settings I wanted to customize.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Certificates:&lt;/strong&gt; Raven uses two different kinds of certificates for server administration: a Cluster certificate and an Admin Client certificate. The cluster certificate is for communicating between nodes securely. The Admin Client cert is for you to connect to Studio securely via your browser. Raven needs the private key so it can authenticate you to the Studio interface using Client Certificate Authentication. Both certs need to be copied to the remote host and we map the host &lt;code&gt;/var/db_cert&lt;/code&gt; to the container path &lt;code&gt;/opt/RavenDB/cert&lt;/code&gt; where Raven looks for certificates.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Raven Args:&lt;/strong&gt; The &lt;code&gt;RAVEN_ARGS&lt;/code&gt; env variable sets up some config needed such as the path to the custom &lt;code&gt;settings.json&lt;/code&gt; file we copy over, specifying no setup wizard experience, and what server URL to bind Raven to, in this case the private container address &lt;code&gt;172.17.0.2:8080&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Volumes:&lt;/strong&gt; Containers stop and start, they are ephemeral. We don't want to lose our data if a container is deleted either (during an upgrade to a new image, say). Raven stores data within the container at &lt;code&gt;/opt/RavenDB/Server/RavenData&lt;/code&gt; and we map that to our host path &lt;code&gt;/var/db&lt;/code&gt; so we can take backups, persist to SSD or block storage, etc.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Remember:&lt;/strong&gt; Raven is running within a container, so we bind to a private IP. We then &lt;em&gt;map&lt;/em&gt; the container port (8080) to a host port (8081) to expose it. Why don't we bind to &lt;code&gt;10.0.0.1&lt;/code&gt;, the host IP? Because Raven can't see that from within a container and it'll fail to boot up. Instead, the DNS &lt;code&gt;*.ravendb.community&lt;/code&gt; can be used to set up a name that points to the private VM network IP and so you'll never need to expose Raven publicly outside your VM, besides the Studio interface to manage it (which you can lockdown to a limited IP range using Vultr).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note about DNS:&lt;/strong&gt; Notice I am copying certificates over. Where did I get them? I actually generated them all through Setup Wizard in a &lt;strong&gt;fresh local RavenDB installation&lt;/strong&gt; so I could more easily set up a new cluster with certs and DNS already created. You can walk through the same steps with a local Docker container of RavenDB.&lt;/p&gt;
&lt;p&gt;I found the following guides helpful when setting up RavenDB in a container:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://ravendb.net/docs/article-page/4.2/csharp/start/installation/setup-wizard"&gt;RavenDB Installation: Setup Wizard&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ravendb.net/docs/article-page/4.2/csharp/start/installation/setup-examples/aws-docker-linux-vm"&gt;RavenDB: Docker on AWS Linux VM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ravendb.net/docs/article-page/4.2/csharp/start/installation/running-in-docker-container"&gt;RavenDB: Running in a Docker Container&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://hub.docker.com/r/ravendb/ravendb/"&gt;DockerHub for ravendb/ravendb&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="running-the-ansible-playbook"&gt;Running the Ansible Playbook&lt;/h2&gt;
&lt;p&gt;Now that we have our &lt;code&gt;ravendb.yml&lt;/code&gt; playbook and &lt;code&gt;inventory&lt;/code&gt; file, we can run &lt;code&gt;ansible-playbook&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ansible-playbook -i inventory -K ravendb.yml
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;-K&lt;/code&gt; flag will prompt for the &lt;code&gt;ansible_become_user&lt;/code&gt; password. This &lt;strong&gt;should not&lt;/strong&gt; be anywhere in plaintext in source control or your host machine. It either needs to be provided when running the command interactively or via &lt;a href="https://docs.ansible.com/ansible/latest/user_guide/vault.html"&gt;Ansible Vault&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;You'll be promoted first for the &lt;code&gt;become_user&lt;/code&gt; password, then the SSH key phrase if necessary, and finally it will run through the playbook.&lt;/p&gt;
&lt;h2 id="finishing-the-installation"&gt;Finishing the Installation&lt;/h2&gt;
&lt;p&gt;If it was successful, everything will be &lt;code&gt;ok&lt;/code&gt; and you can then browse to the Studio in your local browser against your VM's public IP address (and hopefully, only allowing your IP via a firewall rule).&lt;/p&gt;
&lt;p&gt;If the Studio prompts for your certificate, choose it, and now you can finish setting up the cluster:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Enter your license to activate the cluster&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ravendb.net/docs/article-page/4.2/csharp/server/ongoing-tasks/backup-overview"&gt;Set up backups&lt;/a&gt;, which took all of 5 minutes to hook up to Azure Storage.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ravendb.net/docs/article-page/4.2/csharp/server/security/authentication/certificate-management"&gt;Create client certs&lt;/a&gt; for your applications to &lt;a href="https://ravendb.net/docs/article-page/4.2/csharp/server/security/authentication/client-certificate-usage"&gt;connect to Raven programmatically&lt;/a&gt;. When creating a client certificate in the Studio, a zip file will be downloaded automatically after generating containing your &lt;code&gt;pfx&lt;/code&gt; file you can use in your app.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="conclusion"&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;While I've laid out what works for me if you deviate chances are you'll need to do a continuous trial-and-error process to successfully configure your Raven installation. But I hope this provides a nice starting point for configuring a production cluster! If you run into any issues, feel free to leave a comment so others can learn too.&lt;/p&gt;
&lt;blockquote class="blockquote"&gt;
&lt;p&gt;If you are still learning RavenDB 4, &lt;a href="https://bit.ly/PSRavenDB4"&gt;check out my Getting Started with RavenDB 4&lt;/a&gt; Pluralsight course! It covers the basics like how to get around the Studio, connect with .NET, and more. Using my link won't cost you anything extra but I will get credit for your subscription which helps me out!&lt;/p&gt;
&lt;/blockquote&gt;
</content>
		<summary>&lt;p&gt;I've finished migrating my database infrastructure for &lt;a href="https://ktomg.com"&gt;Keep Track of My Games&lt;/a&gt; from &lt;a href="https://ravendb.net"&gt;RavenDB&lt;/a&gt; 3.5 to 4.1 (&lt;a href="https://ravendb.net/features/ravendb-42-features"&gt;and soon, 4.2&lt;/a&gt;!).&lt;/p&gt;</summary>
	</entry>
	<entry>
		<link href="https://kamranicus.com/posts/2019-04-28-quarterly-1-update" />
		<id>https://kamranicus.com/posts/2019-04-28-quarterly-1-update</id>
		<title>2019 Goals Quarterly Update (Q1)</title>
		<updated>2019-04-28T04:00:00Z</updated>
		<content>&lt;p&gt;This is my first time trying a quarterly update on &lt;a href="https://kamranicus.com/posts/2018-12-20-year-in-review-2019-goals"&gt;my yearly goal setting&lt;/a&gt; but I was updating that old post with progress notes and decided I should just formally document progress every quarter instead of retrofitting an older post. That way if any goals &lt;em&gt;evolve&lt;/em&gt; (which some have!) then I can look back and see that change happening. Also this &lt;em&gt;forces&lt;/em&gt; me to post at least once every 4 months which may get me into the groove of writing more generally.&lt;/p&gt;
&lt;h2 id="progress-on-yearly-goals"&gt;Progress on yearly goals&lt;/h2&gt;
&lt;p&gt;Here are the goals I originally laid out and progress notes for each! At the end I also listed some unplanned accomplishments so I can track those too.&lt;/p&gt;
&lt;h3 id="primary-goals"&gt;Primary Goals&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Professional&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;⌛ Publish 1 Pluralsight course on Azure or TypeScript or React (&lt;del&gt;September&lt;/del&gt; Q4)
&lt;ul&gt;
&lt;li&gt;I have maintenance updates coming in before July but no plans for a course; targeting after summer. Adjusted the target date.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;☑️ Publish 4 Pluralsight guides on React &amp;amp; TypeScript by May
&lt;ul&gt;
&lt;li&gt;I was able to publish &lt;a href="https://kamranicus.com/guides"&gt;3 PS guides&lt;/a&gt; but didn't do a 4th because I actually got an unforeseen opportunity to &lt;a href="https://kamranicus.com/posts/2019-04-04-ravendb-data-modeling-with-indexes"&gt;write a freelance article for RavenDB&lt;/a&gt;! I am marking this goal as completed with a bonus objective!&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;✅ Speak at NDC MN on a TypeScript topic
&lt;ul&gt;
&lt;li&gt;I was &lt;a href="https://kamranicus.com/posts/2019-02-01-ndc-minnesota-flexible-ui-with-react-graphql-typescript"&gt;accepted to speak&lt;/a&gt; at NDC MN in May.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;⌛ Publish 5 technical articles on the blog about Azure, TypeScript, or React
&lt;ul&gt;
&lt;li&gt;I need to plan this out more specifically, though I have a couple ideas! I did post about &lt;a href="https://dev.to/kamranayub/copying-to-the-clipboard-using-react-typescript-material-ui-4fdb"&gt;Copying to clipboard using React and TypeScript&lt;/a&gt; on dev.to.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Personal&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;⌛ Pay off all non-mortgage debt
&lt;ul&gt;
&lt;li&gt;I've paid off all loans under my name! 🎉 Cassie is up next. Neither of us have any credit card debt or car loans, it's just the student loans left.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;⌛ Passive income should account for 2% of earnings, 1099 income for 5%
&lt;ul&gt;
&lt;li&gt;As a percentage of household W-2 income, passive income is at 1% and contracting income is at 1%, making a total of 2%. Not bad and I project passive income will be just at or higher than 2%. I am not quite as sure if contracting will end up being above 5% but I'll try!&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;☑️ Replace my PCs at home with a single good Ultrabook/Notebook and a NAS
&lt;ul&gt;
&lt;li&gt;I sold my secondary PC, decided to keep my main PC but instead got a quieter case for recording. I also picked up a used Lenovo Yoga 720 laptop as my personal on-the-go machine. No NAS quite yet, though. I also discovered I have enough parts for yet another entry-level PC but something is up with the motherboard/parts and it won't turn on correctly 🤷‍♂️.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;⌛ Push 3 substantive updates to KTOMG throughout the year: Steam review revamp, Raven 4 upgrade, and Linux hosting
&lt;ul&gt;
&lt;li&gt;This is my focus for the summer, after NDC. I am nearly done migrating to RavenDB 4!&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;DIY&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;☑️ Learn how to cut trim/baseboard and finish the nursery
&lt;ul&gt;
&lt;li&gt;I finished the nursery but decided to &lt;em&gt;paint&lt;/em&gt; the trim/baseboard instead of replacing it outright, for now.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;⌛ Finish my office decor/storage, maybe paint it too
&lt;ul&gt;
&lt;li&gt;I am in the process of selling my old furniture so I can create a &amp;quot;maker&amp;quot; space for me and my kids. I still would like to paint it.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="stretch-goals"&gt;Stretch Goals&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Professional&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;⌛ Set up a quarterly newsletter
&lt;ul&gt;
&lt;li&gt;I am working on this! Look, I now have a mailing list sign up under each post!&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Publish 1 more Pluralsight course on Azure or TypeScript or React&lt;/li&gt;
&lt;li&gt;Publish 4 additional Pluralsight guides throughout the year&lt;/li&gt;
&lt;li&gt;Participate in 1 Pluralsight Mentoring session&lt;/li&gt;
&lt;li&gt;Become a Microsoft MVP with a focus on Azure/TypeScript content&lt;/li&gt;
&lt;li&gt;⌛ Speak at a JSConf or ReactConf event
&lt;ul&gt;
&lt;li&gt;So far have not been accepted to any that I've applied to but 🤞&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Speak at the React MN meetup about TypeScript or GraphQL&lt;/li&gt;
&lt;li&gt;Record a YouTube video walkthrough of my &lt;a href="https://kamranicus.com/guides/raspberry-pi-3-baby-monitor"&gt;Raspberry Pi baby monitor&lt;/a&gt; written guide&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Personal&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1099 income should account for 12% or more (+2% over 2018)&lt;/li&gt;
&lt;li&gt;⌛ Travel completely free somewhere in the US with wife and 2 kids using miles/points
&lt;ul&gt;
&lt;li&gt;We earned our 50K bonus miles from our Chase Sapphire Preferred card (&lt;a href="https://www.choosefi.com/all-articles/travel-rewards/"&gt;you should too!&lt;/a&gt;) but not sure if we will go anywhere using them yet or wait. I was proud of this one because we used the card to pay off my daughter's birth bills, earn the 50K bonus miles, &lt;em&gt;and&lt;/em&gt; are saving the receipts for &lt;a href="https://www.choosefi.com/use-your-hsa-to-provide-income-in-retirement/"&gt;a future tax-free HSA reimbursement&lt;/a&gt;. That was a nice hack!&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;⛔ Participate in Ludum Dare during the spring
&lt;ul&gt;
&lt;li&gt;This is a no-go, just didn't have the time. Perhaps in fall/winter!&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;DIY&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Install &lt;a href="https://www.youtube.com/watch?v=OJqk2iS_jyQ"&gt;luxury vinyl plank&lt;/a&gt; in my office&lt;/li&gt;
&lt;li&gt;Replace baseboard/trim in my son's bedroom&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="unplanned-accomplishments"&gt;Unplanned Accomplishments&lt;/h2&gt;
&lt;h3 id="professional"&gt;Professional&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Freelance writing for RavenDB.&lt;/strong&gt; I was excited to have the opportunity to work with Hibernating Rhinos, creators of RavenDB, to write two articles on RavenDB. &lt;a href="(https://kamranicus.com/posts/2019-04-04-ravendb-data-modeling-with-indexes)"&gt;One was published in April&lt;/a&gt;, the other will be published in May.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;I made a little app.&lt;/strong&gt; Without much fanfare, &lt;a href="https://reachfi.app/update/2019-02-19-initial-release/"&gt;I released an app&lt;/a&gt; that helps track your savings rate. I'd love to spend more time building it out but it's not a heavy focus right now.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Released an OSS project.&lt;/strong&gt; I released a small &lt;a href="https://www.gatsbyjs.org/packages/gatsby-source-typedoc/?=gatsby-source-type"&gt;gatsby source plugin&lt;/a&gt; for generating TypeDoc to source in a Gatsby app for Excalibur's new docs site.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="personal"&gt;Personal&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Finished 3 books.&lt;/strong&gt; Through Audible and the library, I finished some books: &lt;a href="https://www.goodreads.com/book/show/30835567-hit-refresh"&gt;Hit Refresh&lt;/a&gt;, &lt;a href="https://www.goodreads.com/book/show/35068719-meet-the-frugalwoods"&gt;Meet the Frugalwoods&lt;/a&gt;, and &lt;a href="https://www.goodreads.com/book/show/19288043-gone-girl"&gt;Gone Girl&lt;/a&gt;. I am currently listening to &lt;a href="https://www.goodreads.com/book/show/40187317-mission-critical"&gt;Mission Critical, a Gray Man book&lt;/a&gt; and reading &lt;a href="https://www.goodreads.com/book/show/110312.Conceptual_Blockbusting"&gt;Conceptual Blockbusting&lt;/a&gt; along with &lt;a href="https://www.goodreads.com/book/show/4845.Code_Complete"&gt;Code Complete&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Finished over 60 episodes of ChooseFI&lt;/strong&gt;. It's &lt;a href="https://twitter.com/kamranayub/status/1082390375560593408"&gt;no secret&lt;/a&gt; I love the ChooseFI podcast (and &lt;a href="https://podcasts.apple.com/us/podcast/choosefi/id1187770032"&gt;I'm not alone&lt;/a&gt;). As of this week I'm on episode 67R which means I'm about halfway through the back catalog. &lt;strong&gt;That's about 70 hours of content!&lt;/strong&gt; It's just a fantastic source of information on all aspects of &amp;quot;life optimization&amp;quot; like finance, mindfulness, happiness, and growth. I recommend it whenever I can and if it impacts others the same way it impacted me, then I'll continue singing its praises.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="final-thoughts"&gt;Final thoughts&lt;/h2&gt;
&lt;p&gt;It's been a busy Q1! I owe thanks to &lt;a href="https://todoist.com"&gt;Todoist&lt;/a&gt;, that has transformed how we do things around our household between my wife and I. I've actually enjoyed writing quite a bit though now I feel the itch to come up with content for the blog.&lt;/p&gt;
&lt;p&gt;I have been thinking of what I want Kamranicus.com to be and how it should change to host my content and showcase different things but haven't landed on anything final yet. As you perhaps might notice, in the posts and guides I've enabled Adsense since there are some popular pieces of content on here and I actually earn a little from my Amazon affiliate links already.&lt;/p&gt;
&lt;p&gt;I was also very excited and thankful for the opportunity to do some freelancing as it lit a fire under me to get me working with some business products like &lt;a href="http://fbuy.me/mou3m"&gt;Quickbooks&lt;/a&gt; (use my 50% off referral link) and &lt;a href="http://dochub.com"&gt;Dochub&lt;/a&gt; to better manage my side hustling. It &lt;em&gt;also&lt;/em&gt; derailed my focus on KTOMG for the spring since March-May has just been doing writing leaving much less time to get things done for KTOMG in a timely manner. Oh well!&lt;/p&gt;
&lt;p&gt;Looking towards the summer (Q2), I'm also pretty excited for NDC MN, some course maintenance, and then re-focusing on KTOMG. This will also be our first summer that Cassie and the kids will have off together! So they will be visiting me at work more often and I'll be trying to spend time with them when I can. The grill is already out 🔥🍔&lt;/p&gt;
</content>
		<summary>&lt;p&gt;This is my first time trying a quarterly update on &lt;a href="https://kamranicus.com/posts/2018-12-20-year-in-review-2019-goals"&gt;my yearly goal setting&lt;/a&gt; but I was updating that old post with progress notes and decided I should just formally document progress every quarter instead of retrofitting an older post. That way if any goals &lt;em&gt;evolve&lt;/em&gt; (which some have!) then I can look back and see that change happening. Also this &lt;em&gt;forces&lt;/em&gt; me to post at least once every 4 months which may get me into the groove of writing more generally.&lt;/p&gt;</summary>
	</entry>
	<entry>
		<link href="https://kamranicus.com/posts/2019-04-04-ravendb-data-modeling-with-indexes" />
		<id>https://kamranicus.com/posts/2019-04-04-ravendb-data-modeling-with-indexes</id>
		<title>Data Modeling with Indexes in RavenDB</title>
		<updated>2019-04-04T13:30:00Z</updated>
		<content>&lt;p&gt;I recently had an opportunity to work with &lt;a href="http://ayende.com"&gt;Ayende&lt;/a&gt; from Hibernating Rhinos and creator of &lt;a href="https://ravendb.net"&gt;RavenDB&lt;/a&gt; to take some posts of his regarding data modeling with indexes and bring them to a wider audience. I enjoy working with RavenDB and as you might know, even have a &lt;a href="http://bit.ly/PSRavenDB4"&gt;Getting Started course&lt;/a&gt; on it so I was happy to work with HN to write an article on the subject.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.codeproject.com/Articles/1348454/Data-Modeling-with-Indexes-in-RavenDB"&gt;Data Modeling with Indexes in RavenDB&lt;/a&gt;
went live today on CodeProject and covers how indexes work in Raven and some simple to advanced use cases to show off
their power. Be sure to check it out!&lt;/p&gt;
&lt;p&gt;I'm excited to be working with HN to bring some more articles to a wider audience so I'll be sure to share when any other articles go live.&lt;/p&gt;
</content>
		<summary>&lt;p&gt;I recently had an opportunity to work with &lt;a href="http://ayende.com"&gt;Ayende&lt;/a&gt; from Hibernating Rhinos and creator of &lt;a href="https://ravendb.net"&gt;RavenDB&lt;/a&gt; to take some posts of his regarding data modeling with indexes and bring them to a wider audience. I enjoy working with RavenDB and as you might know, even have a &lt;a href="http://bit.ly/PSRavenDB4"&gt;Getting Started course&lt;/a&gt; on it so I was happy to work with HN to write an article on the subject.&lt;/p&gt;</summary>
	</entry>
	<entry>
		<link href="https://kamranicus.com/posts/2019-02-21-typescript-react-getting-started-pluralsight-guide" />
		<id>https://kamranicus.com/posts/2019-02-21-typescript-react-getting-started-pluralsight-guide</id>
		<title>New Pluralsight Guide: Getting Started With React and TypeScript </title>
		<updated>2019-02-22T03:16:00Z</updated>
		<content>&lt;p&gt;I just published my third Pluralsight guide: &lt;a href="https://pluralsight.pxf.io/3Y65d"&gt;Getting Started with React and TypeScript&lt;/a&gt;. I cover a few different ways to start up a new React project with TypeScript including create-react-app, from scratch, and bundling with Webpack/Parcel.&lt;/p&gt;
</content>
		<summary>&lt;p&gt;I just published my third Pluralsight guide: &lt;a href="https://pluralsight.pxf.io/3Y65d"&gt;Getting Started with React and TypeScript&lt;/a&gt;. I cover a few different ways to start up a new React project with TypeScript including create-react-app, from scratch, and bundling with Webpack/Parcel.&lt;/p&gt;</summary>
	</entry>
	<entry>
		<link href="https://kamranicus.com/posts/2019-02-01-ndc-minnesota-flexible-ui-with-react-graphql-typescript" />
		<id>https://kamranicus.com/posts/2019-02-01-ndc-minnesota-flexible-ui-with-react-graphql-typescript</id>
		<title>NDC MN 2019: Designing a Flexible UI Architecture with React and GraphQL</title>
		<updated>2019-02-02T02:38:00Z</updated>
		<content>&lt;p&gt;I'm excited to &lt;a href="/posts/2018-05-11-ndc-minnesota-typescript-react"&gt;once again&lt;/a&gt; be invited to &lt;a href="https://ndcminnesota.com/talk/designing-a-flexible-ui-architecture-with-react-and-graphql/"&gt;speak at NDC Minnesota&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Update:&lt;/strong&gt; The recording is live:&lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/mIejhIX7ObE" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen&gt;&lt;/iframe&gt;
&lt;p&gt;Here's the what I'm speaking about:&lt;/p&gt;
&lt;h3 id="designing-a-flexible-ui-architecture-with-react-and-graphql"&gt;Designing a Flexible UI Architecture with React and GraphQL&lt;/h3&gt;
&lt;blockquote class="blockquote"&gt;
&lt;p&gt;Many line-of-business apps we build today are &amp;quot;forms over data&amp;quot; applications. That data has its own backend schema and business rules, used by systems across the company. As that data flexes and scales, so do the needs of our UIs. Trying to manually track and maintain those data type changes in our UIs is time consuming and inevitably leads to bugs that cause data quality issues and results in real business impact.&lt;/p&gt;
&lt;p&gt;Instead why don't we introduce our own UI schema that abstracts the myriad backend data sources with common sets of rules and metadata shared with both the client and server? I will show you how we designed and built a modern schema-driven UI architecture with React, Redux, TypeScript, and GraphQL that could manage business complexity and still scale to meet future data requirements.&lt;/p&gt;
&lt;p&gt;I'll share some lessons learned and advice for your own applications so you can design your own data-driven flexible UI architecture that fits your business needs.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I'm real excited about this talk because it's the culmination of exactly a year's worth of learning and effort at my job--rewriting part of an application from AngularJS to React/TypeScript.&lt;/p&gt;
&lt;p&gt;In the process I became intimately familiar with how to build production React applications, using TypeScript with React more intensely, testing with Jest and &lt;a href="https://cypress.io"&gt;Cypress&lt;/a&gt;, and working with Apollo Server GraphQL (like fixing &lt;a href="https://kamranicus.com/posts/2018-03-06-graphql-apollo-object-caching"&gt;weird bugs&lt;/a&gt;). We solved some really interesting business problems that I'll dive into during the talk and ultimately created an elegant solution that has scaled nicely in terms of maintenance and agility for our product.&lt;/p&gt;
&lt;p&gt;Hope to see you there, please stop me and say hello! If you can, try to &lt;a href="https://pubconf.io/"&gt;attend PubConf&lt;/a&gt; too, it's a &lt;strong&gt;ton&lt;/strong&gt; of fun.&lt;/p&gt;
</content>
		<summary>&lt;p&gt;I'm excited to &lt;a href="/posts/2018-05-11-ndc-minnesota-typescript-react"&gt;once again&lt;/a&gt; be invited to &lt;a href="https://ndcminnesota.com/talk/designing-a-flexible-ui-architecture-with-react-and-graphql/"&gt;speak at NDC Minnesota&lt;/a&gt;!&lt;/p&gt;</summary>
	</entry>
	<entry>
		<link href="https://kamranicus.com/posts/2019-01-21-typescript-composing-react-components-pluralsight-guide" />
		<id>https://kamranicus.com/posts/2019-01-21-typescript-composing-react-components-pluralsight-guide</id>
		<title>New Pluralsight Guide: Composing React Components with TypeScript</title>
		<updated>2019-01-22T01:31:00Z</updated>
		<content>&lt;p&gt;I just published my second Pluralsight guide: &lt;a href="https://pluralsight.pxf.io/x5PN5"&gt;Composing React Components with TypeScript&lt;/a&gt;. I cover the basics of how to compose React components using common patterns like specialization, higher-order components (HOCs), and render props with TypeScript. Go ahead and check it out!&lt;/p&gt;
</content>
		<summary>&lt;p&gt;I just published my second Pluralsight guide: &lt;a href="https://pluralsight.pxf.io/x5PN5"&gt;Composing React Components with TypeScript&lt;/a&gt;. I cover the basics of how to compose React components using common patterns like specialization, higher-order components (HOCs), and render props with TypeScript. Go ahead and check it out!&lt;/p&gt;</summary>
	</entry>
	<entry>
		<link href="https://kamranicus.com/posts/2018-12-20-year-in-review-2019-goals" />
		<id>https://kamranicus.com/posts/2018-12-20-year-in-review-2019-goals</id>
		<title>2018 Year in Review and 2019 Goals</title>
		<updated>2018-12-21T05:01:00Z</updated>
		<content>&lt;p&gt;Wow, what a year! &lt;a href="https://kamranicus.com/posts/2018-01-01-2018-a-new-year"&gt;At the start of 2018 I laid out my goals&lt;/a&gt; and I ended up crushing them! I hadn't heard of &lt;a href="https://syntax.fm/show/067/hasty-treat-goal-setting"&gt;&lt;em&gt;SMART&lt;/em&gt; goal setting yet&lt;/a&gt; but they ended up fitting the acronym: &lt;strong&gt;S&lt;/strong&gt;pecific, &lt;strong&gt;M&lt;/strong&gt;easurable, &lt;strong&gt;A&lt;/strong&gt;chievable, &lt;strong&gt;R&lt;/strong&gt;ealistic, and &lt;strong&gt;T&lt;/strong&gt;ime-bound.&lt;/p&gt;
&lt;h2 id="goals-in-review"&gt;Goals in Review&lt;/h2&gt;
&lt;p&gt;Let's review my 2018 and goals and see how I stacked up.&lt;/p&gt;
&lt;h2 id="primary-goals"&gt;Primary Goals&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;✅ &lt;del&gt;Publish 1 more Pluralsight course&lt;/del&gt; (&lt;a href="https://kamranicus.com/posts/2018-10-18-new-azure-pluralsight-courses"&gt;DONE&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;✅ &lt;del&gt;Host a half-day workshop (scheduled for April)&lt;/del&gt; (&lt;a href="https://kamranicus.com/posts/2018-04-29-azure-nodejs-workshop-minnewebcon"&gt;DONE&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;✅ &lt;del&gt;Participate in a LD game jam&lt;/del&gt; (&lt;a href="https://kamranicus.com/posts/2018-04-29-ludum-dare-41-post-mortem"&gt;DONE&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;✅ &lt;del&gt;Attend and present at 2 conferences&lt;/del&gt; (&lt;a href="https://kamranicus.com/posts/2018-04-29-azure-nodejs-workshop-minnewebcon"&gt;DONE&lt;/a&gt; and &lt;a href="https://kamranicus.com/posts/2018-05-11-ndc-minnesota-typescript-react"&gt;DONE&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;✅ &lt;del&gt;Attend and present at a local user group&lt;/del&gt; (&lt;a href="https://twitter.com/kamranayub/status/1037840790414864384"&gt;DONE&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;✅ &lt;del&gt;Finish KTOMG UI revamp with React&lt;/del&gt; (&lt;a href="https://twitter.com/kamranayub/status/1055344465991344128"&gt;DONE&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;⛔ Continue doing code livestreams&lt;/li&gt;
&lt;li&gt;⛔ Publish another Pi guide for a project I have in mind&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="stretch-goals"&gt;Stretch Goals&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;⛔ Become a Microsoft MVP
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Nominated, but nope.&lt;/strong&gt; Unfortunately, somehow my MVP nomination fell through the cracks and I didn't hear back until September this year. They advised me to re-submit. 😞&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;☑️ Publish 2 more Pluralsight courses
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://kamranicus.com/posts/2018-10-18-new-azure-pluralsight-courses"&gt;Yes! Almost.&lt;/a&gt; I ended up doing two courses at once this year.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;⛔ Host a full-day workshop
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Nope.&lt;/strong&gt; Work's been busy with a new release so while I want to start this soon, it won't be in 2018.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;⛔ Stream 10 sessions
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Nope.&lt;/strong&gt; Ended up not having the time/energy to do this.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="retro"&gt;Retro&lt;/h2&gt;
&lt;p&gt;I'm definitely proud of what I accomplished in 2018--especially the dual-wielding courses. That was a risky proposition but with proper tracking and progress checkpoints, I managed to do it in almost as many hours as it took for me to do my first course.&lt;/p&gt;
&lt;p&gt;It's clear my stretch goals were definite stretches! For my evenings, I have a few choices of what to do: laze about, contract work, &lt;a href="https://keeptrackofmygames.com"&gt;Keep Track of My Games&lt;/a&gt;, open source, house work. You may be surprised to know a lot of the time I do end up lazing about--but it's with my wife or friends, watching shows, playing board games, or generally enjoying people's company. So I don't think it's &lt;em&gt;necessarily&lt;/em&gt; unproductive! Still, those choices don't leave a ton of room for Twitch streaming. I'm just not positive it'll be a value-add activity for me, so I'm leaving it off my 2019 goals.&lt;/p&gt;
&lt;p&gt;The MVP goal was very disappointing. Eventually after 10 months, the program manager responded to my email and said to just try again as the window was lost. It's supposed to be a 90-day window but for some reason I just got lost in the process. &lt;strong&gt;It will&lt;/strong&gt; be on my 2019 goals again. New for 2019 is the requirement that you be nominated--luckily I have some MVP colleagues that are willing to put in a word for me! &lt;a href="https://twitter.com/kamranayub"&gt;Get in touch&lt;/a&gt; if you want to throw your weight in, too.&lt;/p&gt;
&lt;p&gt;Workshop? Just didn't have a chance. The half-day workshop was awesome and I'd do it again. In 2019 I may work on a React/TypeScript workshop and pitch it to Frontend Masters or to conferences. It may turn into a 2020 goal.&lt;/p&gt;
&lt;h2 id="other-year-end-accomplishments"&gt;Other Year-End Accomplishments&lt;/h2&gt;
&lt;p&gt;It's always the case you end up doing things you never planned. Here's what else I ended up accomplishing:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Hustle and passive income accounted for over 10% of my yearly earnings.&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;This was a goal I had in mind but didn't write down for 2018. I wanted to try and see if I could make my gig/passive income account for at least 10% of my earnings and &lt;strong&gt;it did!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="images/2018-12-20-23-15-14.png" class="img-fluid" alt="Hustlin and bustlin" /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;a href="https://kamranicus.com/posts/2018-12-20-typescript-react-components-pluralsight-guide"&gt;Published first Pluralsight guide&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;My first guide around TypeScript/React came out this last week!&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;a href="https://kamranicus.com/posts/2018-05-01-dotnetrocks-ravendb-podcast"&gt;Appeared on .NET Rocks to talk about RavenDB 4&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;How awesome is that?! Have been a fan for years and it was surreal to be on there.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;a href="https://www.youtube.com/watch?v=bqP2O3VHjQ8"&gt;Appeared on Script &amp;amp; Style webcast to talk about Excalibur.js and web games&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://twitter.com/toddhgardner"&gt;Todd Gardner&lt;/a&gt; invited me on with my friend &lt;a href="https://twitter.com/erikonarheim"&gt;Erik&lt;/a&gt; to discuss building web games and our open source experience with &lt;a href="https://github.com/excaliburjs/Excalibur"&gt;Excalibur.js&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Bought a house&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Found a good house for a good deal in a great neighborhood next to a school. The first project was done in May, which was to &lt;a href="https://twitter.com/kamranayub/status/999037691382632449"&gt;build an office wall&lt;/a&gt;! I'm super enthusiastic about learning to DIY and I can't recommend the &lt;a href="https://www.youtube.com/channel/UCnorhjQR4zJkT7AVNhu395Q"&gt;Home RenoVision&lt;/a&gt; YT channel enough as a learning resource.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Had another kid&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Baby girl in November, she's awesome!&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Released React rewrite of &lt;a href="https://keeptrackofmygames.com"&gt;KTOMG&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;This was huge! At least a 8-10 month endeavor. I still have plenty of work to do with KTOMG but at least that's out of the way.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Finished some games:&lt;/strong&gt; Far Cry 5, Destiny 2 (story), Telltale's Game of Thrones.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Still working through Red Dead 2, AC: Syndicate, LoZ: BoW, and Witcher 3. They're all long, gimme some slack!&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Published 13 blog posts&lt;/strong&gt;. Whoo!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Traveled to New England and Montreal with family&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Using &lt;a href="https://www.choosefi.com/009-travel-rewards-travel-world-free-ultimate-guide/"&gt;travel rewards&lt;/a&gt;, the flights were free and hotels were split with a family friend. We rented a car and drove from Boston around New England up to Montreal and back. It was awesome.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Went through our finances with a fine-toothed comb&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;This probably deserves its own post but I had a wake-up call of sorts and determined to eliminate a bunch of needless expenses we had been accumulating over the years. My wife and I are already fairly frugal people but didn't have a framework or the tools around it we needed. &lt;a href="https://www.choosefi.com/"&gt;Now we do&lt;/a&gt; and I'm super excited about it. I hope to do a post on it sometime in 2019. This aligns with me and my wife's 5- and 10-year plans for our family so I'm glad we started now.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="im-coming-for-you-2019"&gt;I'm Coming for You, 2019&lt;/h2&gt;
&lt;p&gt;With the SMART framework in mind, let's see if I can establish some goals to accomplish in 2019. Keeping in check that I have a new baby daughter, I'll need to focus on the &lt;strong&gt;Attainable&lt;/strong&gt; and &lt;strong&gt;Realistic&lt;/strong&gt; portions of the acronym.&lt;/p&gt;
&lt;h3 id="primary-goals-1"&gt;Primary Goals&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Professional&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Publish 1 Pluralsight course on Azure or TypeScript or React by September&lt;/li&gt;
&lt;li&gt;Publish 4 Pluralsight guides on React &amp;amp; TypeScript by May&lt;/li&gt;
&lt;li&gt;Speak at NDC MN on a TypeScript topic&lt;/li&gt;
&lt;li&gt;Publish 5 technical articles on the blog about Azure, TypeScript, or React&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Personal&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Pay off all non-mortgage debt&lt;/li&gt;
&lt;li&gt;Passive income should account for 2% of earnings, 1099 income for 5%&lt;/li&gt;
&lt;li&gt;Replace my PCs at home with single good Ultrabook/Notebook and a NAS&lt;/li&gt;
&lt;li&gt;Push 3 substantive updates to KTOMG throughout the year: Steam review revamp, Raven 4 upgrade, and Linux hosting&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;DIY&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Learn how to cut trim/baseboard and finish the nursery&lt;/li&gt;
&lt;li&gt;Finish my office decor/storage, maybe paint it too&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="stretch-goals-1"&gt;Stretch Goals&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Professional&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Set up a quarterly newsletter&lt;/li&gt;
&lt;li&gt;Publish 1 more Pluralsight course on Azure or TypeScript or React&lt;/li&gt;
&lt;li&gt;Publish 4 additional Pluralsight guides throughout the year&lt;/li&gt;
&lt;li&gt;Participate in 1 Pluralsight Mentoring session&lt;/li&gt;
&lt;li&gt;Become a Microsoft MVP with a focus on Azure/TypeScript content&lt;/li&gt;
&lt;li&gt;Speak at a JSConf or ReactConf event&lt;/li&gt;
&lt;li&gt;Speak at the React MN meetup about TypeScript or GraphQL&lt;/li&gt;
&lt;li&gt;Record a YouTube video walkthrough of my &lt;a href="https://kamranicus.com/guides/raspberry-pi-3-baby-monitor"&gt;Raspberry Pi baby monitor&lt;/a&gt; written guide&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Personal&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1099 income should account for 12% or more (+2% over 2018)&lt;/li&gt;
&lt;li&gt;Travel completely free somewhere in the US with wife and 2 kids using miles/points&lt;/li&gt;
&lt;li&gt;Participate in Ludum Dare during the spring&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;DIY&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Install &lt;a href="https://www.youtube.com/watch?v=OJqk2iS_jyQ"&gt;luxury vinyl plank&lt;/a&gt; in my office&lt;/li&gt;
&lt;li&gt;Replace baseboard/trim in my son's bedroom&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There you have it! These &lt;em&gt;seem&lt;/em&gt; pretty doable to me as I am well-positioned to accomplish most of them this next year. For 2019 I split the goals into sub-groups to organize them better. Focusing on professional growth, personal goals, and DIY skills!&lt;/p&gt;
&lt;p&gt;It's &lt;strong&gt;still a lot&lt;/strong&gt; but what's life without a little ambition? I can top 2018 if I work at it. As for the baby, I accomplished everything last year without compromising time with my family. I am confident I can do the same in 2019 if I focus on it!&lt;/p&gt;
</content>
		<summary>&lt;p&gt;Wow, what a year! &lt;a href="https://kamranicus.com/posts/2018-01-01-2018-a-new-year"&gt;At the start of 2018 I laid out my goals&lt;/a&gt; and I ended up crushing them! I hadn't heard of &lt;a href="https://syntax.fm/show/067/hasty-treat-goal-setting"&gt;&lt;em&gt;SMART&lt;/em&gt; goal setting yet&lt;/a&gt; but they ended up fitting the acronym: &lt;strong&gt;S&lt;/strong&gt;pecific, &lt;strong&gt;M&lt;/strong&gt;easurable, &lt;strong&gt;A&lt;/strong&gt;chievable, &lt;strong&gt;R&lt;/strong&gt;ealistic, and &lt;strong&gt;T&lt;/strong&gt;ime-bound.&lt;/p&gt;</summary>
	</entry>
	<entry>
		<link href="https://kamranicus.com/posts/2018-12-20-typescript-react-components-pluralsight-guide" />
		<id>https://kamranicus.com/posts/2018-12-20-typescript-react-components-pluralsight-guide</id>
		<title>New Pluralsight Guide: How to Statically Type React Components with TypeScript</title>
		<updated>2018-12-21T03:22:00Z</updated>
		<content>&lt;p&gt;I just published my first Pluralsight guide: &lt;a href="https://pluralsight.pxf.io/b7An9"&gt;How to Statically Type React Components with TypeScript&lt;/a&gt;. I cover the basics of how to annotate React components, props, state, and events with TypeScript. Go ahead and check it out!&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;As you may know if you &lt;a href="https://twitter.com/kamranayub"&gt;follow me on social media&lt;/a&gt;, baby #2 dropped in November so I'm taking a good amount of time before I commit to a big contract like &lt;a href="https://kamranicus.com/posts/2018-10-18-new-azure-pluralsight-courses"&gt;doing two Pluralsight courses at once&lt;/a&gt;. That was well worth it but quite a feat.&lt;/p&gt;
&lt;p&gt;Still--I'm not one to sit around long and evenings are still protected time. One thing I love about doing Pluralsight work is that they have a myriad of opportunities besides just doing video courses. One of them is assessments, which I did a few months back, by writing questions for the JavaScript ES6 assessment (I worked with 2 other authors on that). Another recent opportunity has been &lt;a href="https://pluralsight.pxf.io/9e5XW"&gt;Guides&lt;/a&gt; which are in their infancy. I imagine the team has big plans for that section of the site.&lt;/p&gt;
&lt;p&gt;I reached out to my ASM last week and said I'd be interested in some low-key work and guides came up as a good activity, so I took a look and &lt;em&gt;lo and behold&lt;/em&gt; I had struck some gold. It turns out, they need some guides around using React with TypeScript.&lt;/p&gt;
&lt;p&gt;And you know what I think about that. &lt;a href="/events"&gt;I like it a lot&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;So I offered to start with the first objective I thought I could tackle. It took me about 4 hours and that included planning and rewriting it once to adhere to the standards/guidelines. I think next time I'll be able to get it down to 2-3 hours. I'm always willing to try these opportunities 2-3 times before deciding if they're worth the investment. The time tracking I started doing for the last courses helps immensely!&lt;/p&gt;
&lt;p&gt;&lt;img src="images/2018-12-20-22-31-34.png" class="img-fluid" alt="Didn't take long at all" /&gt;&lt;/p&gt;
&lt;p&gt;Looking forward to the next guide, which I'll pick up next week hopefully!&lt;/p&gt;
</content>
		<summary>&lt;p&gt;I just published my first Pluralsight guide: &lt;a href="https://pluralsight.pxf.io/b7An9"&gt;How to Statically Type React Components with TypeScript&lt;/a&gt;. I cover the basics of how to annotate React components, props, state, and events with TypeScript. Go ahead and check it out!&lt;/p&gt;</summary>
	</entry>
	<entry>
		<link href="https://kamranicus.com/posts/2018-10-18-new-azure-pluralsight-courses" />
		<id>https://kamranicus.com/posts/2018-10-18-new-azure-pluralsight-courses</id>
		<title>Two New Pluralsight Courses on Azure Storage Published</title>
		<updated>2018-10-26T03:22:00Z</updated>
		<content>&lt;p&gt;The first week of October I released not one but &lt;strong&gt;TWO&lt;/strong&gt; Pluralsight courses I've been hard at work on the past few months:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Implementing Azure CDN with Azure Storage&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://bit.ly/PSAzureStorageCDN"&gt;&lt;img src="https://user-images.githubusercontent.com/563819/47162935-95932a80-d2ba-11e8-8d95-a037ca745333.png" class="img-fluid" alt="Azure CDN course link" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://bit.ly/PSAzureStorageCDN"&gt;Watch the course now&lt;/a&gt;. This course covers a lot of how Azure CDN works and various ways to integrate it with Azure blob service. I walk through how Azure CDN works at a high-level, then dive down into ways to automate the creation of CDN profiles/endpoints and how to serve content from blob storage. I cover Azure PowerShell, Azure CLI, REST, and ARM templates. I also spend a whole module on serving content securely using Shared Access Signature (SAS) tokens in different ways including pass-through authentication, hidden SAS authentication, and CDN token authentication.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Configuring CORS with Azure Storage&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://bit.ly/PSAzureStorageCORS"&gt;&lt;img src="https://user-images.githubusercontent.com/563819/47162956-9f1c9280-d2ba-11e8-9109-b93dfe96dee5.png" class="img-fluid" alt="Azure CORS course link" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://bit.ly/PSAzureStorageCORS"&gt;Watch the course now&lt;/a&gt;. This course covers configuring Cross-Origin Resource Sharing (CORS) with Azure Storage accounts. First, we spend time on what CORS is, how it works, what it's &lt;strong&gt;not&lt;/strong&gt; (hint: it's not a way to do authentication!), and then how Azure evaluates CORS rules internally. Then I walk through several automation scenarios in Azure PowerShell, Azure CLI, and REST. By the way, I've &lt;a href="https://github.com/kamranayub/azure-storage-rest-postman"&gt;open sourced a Postman collection&lt;/a&gt; that handles signing Azure Storage REST requests, if you're interested.&lt;/p&gt;
&lt;h2 id="building-two-courses-at-once"&gt;Building two courses at once&lt;/h2&gt;
&lt;p&gt;As you may know, I &lt;a href="https://kamranicus.com/posts/2018-02-08-ravendb-4-course-live"&gt;released a RavenDB 4 course&lt;/a&gt; earlier this year so this was not my first experience making a course. But it &lt;strong&gt;was&lt;/strong&gt; my first time doing two courses at once!&lt;/p&gt;
&lt;p&gt;The genesis of these courses was sparked by meeting with a Pluralsight &amp;quot;author success manager&amp;quot; (aka ASM) at NDC MN on the speaker boat cruise (which reminds me, &lt;a href="https://ndcminnesota.com/"&gt;register for NDC MN 2019&lt;/a&gt;!). I was meeting her to get some author swag! We got into a conversation about what courses I'd do in the future and I mentioned I was thinking of diversifying my next set. She asked, &amp;quot;Do you know anything about Microsoft Azure?&amp;quot; and I was like, &amp;quot;Yeah!&amp;quot; 😎&lt;/p&gt;
&lt;p&gt;We decided early on that because these two courses were similar that I could potentially do both at once. I was really happy my ASM believed I could do it but I wasn't sure &lt;em&gt;I&lt;/em&gt; could. I knew that I had a hard deadline of November as that's when the next baby comes along (it's &lt;em&gt;too&lt;/em&gt; close now...). At the time we were discussing it, it was May/June. These courses were a little special in that they are considered &amp;quot;partner&amp;quot; courses with Microsoft so they involved back-and-forth with Microsoft that would extend the course timelines.&lt;/p&gt;
&lt;p&gt;Still, the opportunity to do &lt;strong&gt;two&lt;/strong&gt; courses was not something I'd be offered every time and it would be in-line with my &lt;a href="https://kamranicus.com/posts/2018-01-01-2018-a-new-year#goals"&gt;2018 stretch goal&lt;/a&gt; of doing two additional courses. So I said yes. But I knew I had to plan these courses differently than my first due to the tighter timelines.&lt;/p&gt;
&lt;p&gt;By the time the proposal process finished and after a vacation in August, the actual timeline I ended up working with was mid-August to October 8. &lt;strong&gt;It was about 2 months less than I thought I'd have!&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id="tracking-time"&gt;Tracking time&lt;/h2&gt;
&lt;p&gt;Let me start by telling you that building these two courses took exactly &lt;strong&gt;112 hours&lt;/strong&gt;. I &lt;strong&gt;know&lt;/strong&gt; this because I was religiously tracking time. I had also created a task plan for each course at the start, here's what my Trello cards looked like:&lt;/p&gt;
&lt;p&gt;&lt;img src="https://user-images.githubusercontent.com/563819/47169134-553aa900-d2c8-11e8-8cb2-5608d42ab953.png" class="img-fluid" alt="Trello cards" /&gt;&lt;/p&gt;
&lt;p&gt;You can see the duration for each card and the number of tasks I was tracking. I used the Trello Power-Up, &lt;a href="https://trello.com/power-ups/59cf411fe342369bca2565b9/timecamp"&gt;TimeCamp&lt;/a&gt;, to track time by just clicking a button on the Trello card. I really liked how easy this was; I always had my cards up anytime I worked on the courses and I'd just flip between them tracking time.&lt;/p&gt;
&lt;p&gt;Now, using this data, I can actually see what hours over time look like for each course (note the timescales differ):&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;CDN With Storage&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://user-images.githubusercontent.com/563819/47540021-bd752600-d898-11e8-809f-1057dac567d3.png" class="img-fluid" alt="Hours over time" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;CORS with Storage&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://user-images.githubusercontent.com/563819/47540071-ec8b9780-d898-11e8-84bc-cc8672ca1d71.png" class="img-fluid" alt="Hours over time" /&gt;&lt;/p&gt;
&lt;p&gt;A few observations:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;The red dotted line was my hours budget.&lt;/strong&gt; Based on the proposal and scope of work, I budgeted 60h for each course. You can see I went over my budget for the CDN course since there was a 3rd module but my CORS course was well under budget at 45h, so overall I feel really good about the planning that went into the courses.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Production ramped up in September.&lt;/strong&gt; If you notice, I did not start the CDN course actively until Aug 18 and the CORS course actively until the 4th of Sep. By looking at the flat lines, you can see when I submitted a module and waited for review. I didn't really start crunching until Sep 11. By the way, that last bit Oct 1 to Oct 9 was the final module for the CDN course. Phew. 😅&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Why did I even put a hours budget?&lt;/em&gt; Pluralsight pays a course completion fee for every produced course and this fee varies by course. I wanted to see if I could target a specific hourly bill rate with the fee I agreed to. I ended up exceeding my target rate which is a good thing--it means even if these courses made zero royalties, I was already compensated for the work put into producing them. I &lt;strong&gt;do&lt;/strong&gt; get royalties for these, though so that's just a bonus.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Why were the first module reviews so long?&lt;/em&gt; Both courses were subject to Microsoft Subject Matter Expert (SME) review and that took awhile to work through. After the first modules, it was a much faster turnaround.&lt;/p&gt;
&lt;h2 id="planning-tasks"&gt;Planning tasks&lt;/h2&gt;
&lt;p&gt;The task planning was straightforward. I planned out each step of the production process:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Proposal tasks&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;for each module&lt;/strong&gt;
&lt;ol&gt;
&lt;li&gt;Content tasks&lt;/li&gt;
&lt;li&gt;Recording tasks&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Post-production tasks&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In practice, here's what that looks like:&lt;/p&gt;
&lt;p&gt;&lt;img src="https://user-images.githubusercontent.com/563819/47169804-173e8480-d2ca-11e8-954d-fa04cb8f8dad.png" class="img-fluid" alt="Trello tasks" /&gt;&lt;/p&gt;
&lt;p&gt;This was really helpful--not only to plan but also to track progress day-to-day.&lt;/p&gt;
&lt;p&gt;Knowing these numbers will help me properly plan for courses down the road.&lt;/p&gt;
&lt;h2 id="producing-the-course"&gt;Producing the course&lt;/h2&gt;
&lt;h3 id="content-creation"&gt;Content creation&lt;/h3&gt;
&lt;p&gt;As you maybe could guess from the time pattern above, I would work on one module for one course and once submitted, flip to the other course. This worked out well, in fact I finished some modules before feedback for the previous one came back to me.&lt;/p&gt;
&lt;p&gt;And this time, I actually wrote script. I knew I couldn't wing it every single time I sat down to record with such a compressed timeline since that would make each recording session take 2-3x longer with my retakes. I'd write my script in the Notes section of the PowerPoint. Sometimes I'd vary slightly when recording from what I had written but since I write very conversationally it wasn't a big issue. It helped reduce the retakes &lt;strong&gt;a lot&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;I started each module by finishing the content first, starting with a rough entire module slide deck, then filling out the content for each clip. The order and names of the clips would generally change as I discovered better ways to flow the content but the objectives almost always stayed the same (it definitely helps to be clear on your module objectives during the proposal process).&lt;/p&gt;
&lt;h3 id="recording-demos"&gt;Recording demos&lt;/h3&gt;
&lt;p&gt;The way I recorded demos also changed a bit. This time, I divided demos into sections (with slide-based script and screenshots which doubled as a transcript) and narrated first then ran through the visual steps (or vice versa). This made it much easier to cut together and keep me focused. If I didn't do this, it would be hard to maintain the position of the mouse or if I encountered an issue, backtracking and editing together two disparate parts. I had to let go a bit of some of my perfectionist nature--sometimes I wished I could just redo entire clips but I knew I didn't have much time. The peer reviews came back very positive so I feel pretty good about the end product regardless!&lt;/p&gt;
&lt;p&gt;One thing I'd definitely do again is to &lt;a href="https://github.com/kamranayub/pluralsight-azure-cdn-with-storage/blob/master/.vscode/settings.json"&gt;set up a custom VS Code settings file&lt;/a&gt; for the materials folder. It allowed me to always keep a consistent VS Code experience and turned off a bunch of stuff that would make it tougher to edit. I've found for all three of my courses, VS Code works for any code demos--it has the terminal, files, everything, it's super clean and super fast.&lt;/p&gt;
&lt;p&gt;I just saw this tip today, too! Heck yeah!&lt;/p&gt;
&lt;blockquote class="twitter-tweet" data-lang="en"&gt;&lt;p lang="en" dir="ltr"&gt;One thing &lt;a href="https://twitter.com/code?ref_src=twsrc%5Etfw"&gt;&amp;#64;code&lt;/a&gt; has going for it is the ability to create &amp;quot;profiles&amp;quot; by supplying CLI args when you open it. Combine it with an alias and 💥 I can open VSCode with my screencast settings in an instant. Thanks for the tip &lt;a href="https://twitter.com/avanslaars?ref_src=twsrc%5Etfw"&gt;&amp;#64;avanslaars&lt;/a&gt; and &lt;a href="https://twitter.com/jlengstorf?ref_src=twsrc%5Etfw"&gt;&amp;#64;jlengstorf&lt;/a&gt; &lt;a href="https://t.co/3RfdeSvHHO"&gt;pic.twitter.com/3RfdeSvHHO&lt;/a&gt;&lt;/p&gt;&amp;mdash; Kyle Shevlin (&amp;#64;kyleshevlin) &lt;a href="https://twitter.com/kyleshevlin/status/1055666040401670145?ref_src=twsrc%5Etfw"&gt;October 26, 2018&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;h3 id="working-with-a-big-monitor"&gt;Working with a big monitor&lt;/h3&gt;
&lt;p&gt;There &lt;em&gt;was&lt;/em&gt; an issue I needed to work through right away which was how I record on an Ultrawide screen. &lt;a href="https://www.amazon.com/gp/product/B01N6S1P2D?&amp;amp;_encoding=UTF8&amp;amp;tag=kamranicus-20&amp;amp;linkCode=ur2&amp;amp;linkId=5427a9094117f6bab8eaccbcc18af141&amp;amp;camp=1789&amp;amp;creative=9325"&gt;I love my monitor&lt;/a&gt; (affiliate link). But it makes it a huge pain to record applications and presentations because they need to be recorded at 1280x720.&lt;/p&gt;
&lt;p&gt;What I ended up doing was two things:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Record PowerPoint using a secondary output to my PC.&lt;/strong&gt; Wait, what? Well, my monitor has multiple outputs including DVI, HDMI, and DisplayPort. I ended up plugging &lt;em&gt;both&lt;/em&gt; my DisplayPort (primary) and HDMI (secondary) into my PC so that I could &lt;em&gt;extend&lt;/em&gt; my desktop onto the HDMI output at 1280x720. This made it pretty straightforward to put PowerPoint presentations on that &amp;quot;monitor&amp;quot; and record. Because Presenter View in PowerPoint shows you the slides, it worked well. I &lt;em&gt;would&lt;/em&gt; have preferred a proper chromeless borderless window that PowerPoint could present on but that isn't available. The windowed mode has a ton of chrome, has no presenter view, and is awkward to deal with.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Use a window resizer tool.&lt;/strong&gt; I would recommend the tool &lt;a href="http://www.brianapps.net/sizer/"&gt;Sizer&lt;/a&gt; by Brian. It works with Windows 10 just fine and allows you to set presets for different window sizes and switch to them quickly for the active application. This allowed me to easily record applications wherever they were on my monitor and even overlay them on top of each other to quickly switch apps without stopping the recording.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="would-i-do-anything-differently"&gt;Would I do anything differently?&lt;/h2&gt;
&lt;p&gt;Well, it's clear with enough planning and ideally &lt;em&gt;3 months&lt;/em&gt; of time, it's very reasonable for me to tackle two short courses simultaneously. Compressing down to 2 months was tough on my evenings though in retrospect I should have done a few more hours a week nearer the beginning to ease the load on the last bits.&lt;/p&gt;
&lt;p&gt;Overall, I'm happy with the result and would do it again. A &lt;strong&gt;huge&lt;/strong&gt; thanks to my supportive Pluralsight team who encouraged me to do it and provided everything I needed to succeed.&lt;/p&gt;
&lt;h2 id="whats-next"&gt;What's next?&lt;/h2&gt;
&lt;p&gt;Course-wise, nothing for awhile, honestly. Producing two courses puts me at &lt;strong&gt;3 Pluralsight courses&lt;/strong&gt; for &lt;em&gt;my first year&lt;/em&gt; which I think is pretty amazing. The new baby is coming in the next couple weeks and I'll be busy with that for 6-8 months. The first months of having an infant will consist of sleepless nights, toddler wrangling, and extreme tiredness. Instead of committing to new courses during that turbulent time, I will be focusing on &lt;a href="http://excaliburjs.com"&gt;Excalibur&lt;/a&gt; and &lt;a href="https://keeptrackofmygames.com"&gt;Keep Track of My Games&lt;/a&gt; work. Oh, and home improvements, which I'd like to write more about. I also plan to propose some talks for 2019! I want to say that any new coursework won't be planned until the back half of 2019. We'll see if I can stay put that long 😊&lt;/p&gt;
</content>
		<summary>&lt;p&gt;The first week of October I released not one but &lt;strong&gt;TWO&lt;/strong&gt; Pluralsight courses I've been hard at work on the past few months:&lt;/p&gt;</summary>
	</entry>
	<entry>
		<link href="https://kamranicus.com/posts/2018-07-26-react-router-custom-transition-ui" />
		<id>https://kamranicus.com/posts/2018-07-26-react-router-custom-transition-ui</id>
		<title>Showing Custom UI on React Router Transitions</title>
		<updated>2018-07-26T13:00:00Z</updated>
		<content>&lt;p&gt;We had a recent requirement on our project to prompt the user with a custom modal when they have some pending changes to save in our application. The intention was to ensure they saved their changes as it affected other parts of the data they're working on and we need to recompute business rules (fun, huh?).&lt;/p&gt;
&lt;p&gt;Since we're leveraging &lt;a href="https://reacttraining.com/react-router/web/guides/philosophy"&gt;React Router v4&lt;/a&gt;, I looked into what was provided out of the box to see how customizable it was.&lt;/p&gt;
&lt;h2 id="the-prompt-component"&gt;The Prompt Component&lt;/h2&gt;
&lt;p&gt;React Router core has a component called &lt;a href="https://reacttraining.com/react-router/core/api/Prompt"&gt;&lt;code&gt;Prompt&lt;/code&gt;&lt;/a&gt;. The purpose of this component is to &lt;a href="https://reacttraining.com/react-router/web/example/preventing-transitions"&gt;show a dialog to the user during a router transition&lt;/a&gt;. The &lt;code&gt;when&lt;/code&gt; prop can be set to enable/disable this functionality dynamically which is great. You can also pass a &lt;code&gt;message&lt;/code&gt; that will get displayed or a function that takes a &lt;code&gt;location&lt;/code&gt; and returns &lt;code&gt;true&lt;/code&gt; to allow navigation or a message to prevent.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;&amp;lt;Prompt when={true} message=&amp;quot;Please save your changes before proceeding&amp;quot; /&amp;gt;
&amp;lt;Prompt when={true} message={location =&amp;gt; location.pathname === &amp;quot;/foo&amp;quot; ? true : &amp;quot;Denied&amp;quot;} /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src="https://user-images.githubusercontent.com/563819/43242206-4b62f540-9065-11e8-80bb-d4ca944cc9ea.png" class="img-fluid" alt="The default prompt" /&gt;&lt;/p&gt;
&lt;p&gt;However, I noticed a few caveats with this component. First, the default prompt is the browser prompt and when you click 'Okay' it &lt;em&gt;allows navigation&lt;/em&gt; which is exactly the opposite of what I want. Second, you can't render custom UI directly through &lt;code&gt;Prompt&lt;/code&gt;--it just takes a &lt;code&gt;message&lt;/code&gt;. Why? If you &lt;a href="https://github.com/ReactTraining/react-router/blob/e6f9017c947b3ae49affa24cc320d0a86f765b55/packages/react-router/modules/Prompt.js#L30"&gt;dive down&lt;/a&gt; into the code, it leverages the &lt;a href="https://www.npmjs.com/package/history"&gt;history&lt;/a&gt; npm package which just delegates to that browser prompt. The good news is, the &lt;code&gt;history&lt;/code&gt; package allows you to override the UI generation via &lt;a href="https://www.npmjs.com/package/history#customizing-the-confirm-dialog"&gt;&lt;code&gt;getUserConfirmation&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;import createHistory from &amp;quot;history/browserHistory&amp;quot;;

const history = createHistory({
  getUserConfirmation(message, callback) {
    // Show some custom dialog to the user and call
    // callback(true) to continue the transiton, or
    // callback(false) to abort it.
  }
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is helpful, using this we can always prevent the transition if needed. So, given that we can't use &lt;code&gt;Prompt&lt;/code&gt; directly to render custom React UI but we &lt;em&gt;can&lt;/em&gt; override the core handler for showing the prompt, is there a way to connect the two? Of course.&lt;/p&gt;
&lt;h2 id="overriding-getuserconfirmation"&gt;Overriding getUserConfirmation&lt;/h2&gt;
&lt;p&gt;First, let's test our assumption out and see if we can log the message we get from &lt;code&gt;Prompt&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Using the regular &lt;code&gt;BrowserRouter&lt;/code&gt; component from &lt;code&gt;react-router-dom&lt;/code&gt;, pass the &lt;code&gt;getUserConfirmation&lt;/code&gt; prop:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;const getUserConfirmation = (message, callback) =&amp;gt; {
  console.log(message);
  callback(false);
}

&amp;lt;BrowserRouter getUserConfirmation={getUserConfirmation}&amp;gt;
...
&amp;lt;/BrowserRouter&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If like me you are using &lt;code&gt;connected-react-router&lt;/code&gt;, we can still customize the &lt;code&gt;createHistory&lt;/code&gt; call as shown above:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;...
import { createBrowserHistory } from 'history'
import { applyMiddleware, compose, createStore } from 'redux'
import { connectRouter, routerMiddleware } from 'connected-react-router'
...
const history = createBrowserHistory({
  getUserConfirmation(message, callback) {
    console.log(message);
    callback(false);
  }
})

const store = createStore(
  connectRouter(history)(rootReducer), // new root reducer with router state
  initialState,
  compose(
    applyMiddleware(
      routerMiddleware(history), // for dispatching history actions
      // ... other middlewares ...
    ),
  ),
)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then our Prompt:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;// MyComponent.js
&amp;lt;Prompt when={true} message=&amp;quot;Please save your changes before proceeding&amp;quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you set this up, when you try to navigate away from the page, you will not be able to and the message will be logged to the console.&lt;/p&gt;
&lt;p&gt;Great! Now you may be thinking, &amp;quot;We can just pass anything and it'll get passed through!&amp;quot; But you'd be wrong because that's what I thought too.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;const MyCustomDialogComponent = () =&amp;gt; &amp;lt;div /&amp;gt;

&amp;lt;Prompt
  when={true}
  message={MyCustomDialogComponent}
/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you try this, nothing will be logged to the console and navigation will not be blocked. React Router uses prop-types to validate &lt;code&gt;message&lt;/code&gt; is a string (phooey!).&lt;/p&gt;
&lt;p&gt;So, we have to stick with strings. Is there another way besides doing a bunch of work to add support for this in &lt;code&gt;react-router&lt;/code&gt; directly (which'd be neat!)?&lt;/p&gt;
&lt;h2 id="using-a-hoc-with-a-global-symbol-based-trigger"&gt;Using a HOC with a Global Symbol-based Trigger&lt;/h2&gt;
&lt;p&gt;I landed on this approach as it seemed to be the less hacky way to achieve this. Essentially, since we can pass a string only to the &lt;code&gt;getUserConfirmation&lt;/code&gt;, I pass in the key for a global &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol"&gt;Symbol&lt;/a&gt; and store a global trigger to signal to the React dialog component to show.&lt;/p&gt;
&lt;p&gt;If you haven't used &lt;code&gt;Symbol&lt;/code&gt; before, it is a primitive type in JavaScript introduced in ES6. What's neat about them is you can &amp;quot;register&amp;quot; them globally and they will be able to be looked up from other modules loaded within the same &amp;quot;code realm&amp;quot; (roughly the execution context of the engine). Well-known global symbols are built-in like &lt;code&gt;Symbol.iterator&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Why a &lt;code&gt;Symbol&lt;/code&gt; vs. just a regular string? A &lt;code&gt;Symbol&lt;/code&gt;-based property won't be &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol#Symbols_and_for...in_iteration"&gt;enumerable&lt;/a&gt; (like using &lt;code&gt;Object.keys&lt;/code&gt;) so it's kind of a way to do basic &amp;quot;private&amp;quot; properties. They can still be enumerated with other methods like &lt;code&gt;Object.getOwnPropertySymbols&lt;/code&gt;. It creates a nice barrier between things your app might care about and walls it off unless someone explictly asks for that property.&lt;/p&gt;
&lt;p&gt;So what does this end up looking like? We create a HOC that has basic state and a method that will show the dialog when triggered (user attempts to navigate away). The &lt;code&gt;getUserConfirmation&lt;/code&gt; handler will receive the Symbol key and invoke the callback on the global object (&lt;code&gt;window&lt;/code&gt;) with that Symbol property.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;// PreventNavigationDialog.js
class PreventNavigationDialog extends React.Component {

  state = { open: false };

  constructor() {
    super();

    // NOTE: Don't actually use Date.now. In the example
    // repo, I use the `cuid` package
    this.__trigger = Symbol.for(`__PreventNavigationDialog_${Date.now()}`);
  }

  componentDidMount() {
    window[this.__trigger] = this.show;
  }

  componentWillUnmount() {
    delete window[this.__trigger];
  }

  render() {
    const { when } = this.props;
    const { open } = this.state;

    return (
      &amp;lt;React.Fragment&amp;gt;
        &amp;lt;Prompt when={when} message={Symbol.keyFor(this.__trigger)} /&amp;gt;
        {open &amp;amp;&amp;amp; &amp;lt;div onClick={this.close}&amp;gt;Test dialog&amp;lt;/div&amp;gt;}
      &amp;lt;/React.Fragment&amp;gt;
    );
  }

  show = allowTransitionCallback =&amp;gt; {
    this.setState({ open: true }, () =&amp;gt; allowTransitionCallback(false));
  };

  close = () =&amp;gt; {
    this.setState({ open: false });
  };
}
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;// index.js

const getUserConfirmation = (dialogKey, callback) =&amp;gt; {

  // use &amp;quot;message&amp;quot; as Symbol-based key
  const dialogTrigger = window[Symbol.for(dialogKey)];

  if (dialogTrigger) {
    // delegate to dialog and pass callback through
    return dialogTrigger(callback);
  }

  // Fallback to allowing navigation
  callback(true);
}

&amp;lt;BrowserRouter getUserConfirmation={getUserConfirmation}&amp;gt;
...
&amp;lt;/BrowserRouter&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Okay, a bit going on here!&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;First, define our shared Symbol. Using &lt;code&gt;Symbol.for&lt;/code&gt; will register the Symbol globally so it can be accessed across the page. We assign it a unique key for lookup (I recommend &lt;a href="https://www.npmjs.com/package/cuid"&gt;&lt;code&gt;cuid&lt;/code&gt;&lt;/a&gt; for real world usage).&lt;/li&gt;
&lt;li&gt;Next, define our HOC with some basic state. It takes in a &lt;code&gt;when&lt;/code&gt; prop just like &lt;code&gt;Prompt&lt;/code&gt; (and passes it down). It also has a simple &lt;code&gt;open&lt;/code&gt; flag.&lt;/li&gt;
&lt;li&gt;When our HOC mounts, it registers our &lt;code&gt;show&lt;/code&gt; trigger globally. It cleans up in case it is unmounted.&lt;/li&gt;
&lt;li&gt;Modify &lt;code&gt;getUserConfirmation&lt;/code&gt; to check and see if a dialog trigger callback exists and call it if so. Since we assign it when the HOC mounts, it will set the state of the dialog.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The nice thing about this design is that we're allowing for multiple potential dialog prompts across the app. We can even have multiple instances of this component without conflict using the uniqueness nature of Symbols. I'm not a huge fan of using &lt;code&gt;window&lt;/code&gt; but it has its uses--it's tough to avoid &lt;em&gt;something&lt;/em&gt; due to how we need to access it in &lt;code&gt;getUserConfirmation&lt;/code&gt; and we can't pass anything but a string.&lt;/p&gt;
&lt;h2 id="demo-and-code"&gt;Demo and Code&lt;/h2&gt;
&lt;p&gt;&lt;img src="https://user-images.githubusercontent.com/563819/43242522-2e47c664-9067-11e8-8799-0e2c9723bf9f.png" class="img-fluid" alt="End result" /&gt;&lt;/p&gt;
&lt;p&gt;You can play with the &lt;a href="https://codesandbox.io/s/myw173jyq8"&gt;fully working CRA-based demo&lt;/a&gt; with Material UI on CodeSandbox or the &lt;a href="https://github.com/kamranayub/example-react-router-transition-ui/tree/master/"&gt;corresponding GitHub repo&lt;/a&gt;. The demo has a few more features like passing &lt;code&gt;title&lt;/code&gt; and &lt;code&gt;message&lt;/code&gt; content as well as using the &lt;code&gt;(location: Location) =&amp;gt; boolean | string&lt;/code&gt; overload that &lt;code&gt;Prompt&lt;/code&gt; &lt;code&gt;message&lt;/code&gt; prop supports to decide whether to allow transitions based on target location (we use this for our app).&lt;/p&gt;
&lt;p&gt;It wouldn't take much to change this HOC to leverage the render props pattern, for example, to show &lt;em&gt;whatever you want&lt;/em&gt; by passing down &lt;code&gt;show&lt;/code&gt;. Reuse it across your app!&lt;/p&gt;
&lt;p&gt;This was an interesting issue to solve and it wasn't as easy as I hoped initially. I hope this helps other people! This could probably be packaged up as a customizable HOC with a little work. Maybe when I have a spare moment I'll stream making a package out of this. Remember to follow me on &lt;a href="https://twitch.tv/kamranicus"&gt;Twitch&lt;/a&gt;!&lt;/p&gt;
</content>
		<summary>&lt;p&gt;We had a recent requirement on our project to prompt the user with a custom modal when they have some pending changes to save in our application. The intention was to ensure they saved their changes as it affected other parts of the data they're working on and we need to recompute business rules (fun, huh?).&lt;/p&gt;</summary>
	</entry>
	<entry>
		<link href="https://kamranicus.com/posts/2018-07-07-react-nesting-components-flat" />
		<id>https://kamranicus.com/posts/2018-07-07-react-nesting-components-flat</id>
		<title>Flattening Deeply Nested Components in React</title>
		<updated>2018-07-07T15:33:00Z</updated>
		<content>&lt;p&gt;Here's a quick tip. Often in entry points of React applications, you have to do some bootstrapping with various providers from dependent modules like Material UI, Redux, JSS, and React Router. That's exactly the stack I'm using so that's what my example is based on.&lt;/p&gt;
&lt;p&gt;Normally, you would do this to bootstrap your &lt;code&gt;App&lt;/code&gt; component:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;React.render(
  &amp;lt;Provider store={store}&amp;gt;
    &amp;lt;ConnectedRouter history={history}&amp;gt;
      &amp;lt;JssProvider jss={jss} generateClassName={generateClassName}&amp;gt;
        &amp;lt;MuiThemeProvider theme={theme}&amp;gt;
          &amp;lt;MuiPickersUtilsProvider utils={MomentUtils}&amp;gt;
            &amp;lt;App /&amp;gt; {/* FINALLY */}
          &amp;lt;/MuiPickersUtilsProvider&amp;gt;
        &amp;lt;/MuiThemeProvider&amp;gt;
      &amp;lt;/JssProvider&amp;gt;
    &amp;lt;/ConnectedRouter&amp;gt;
  &amp;lt;/Provider&amp;gt;
)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It feels like I'm in Dante's Inferno creating the 9 circles of hell. I'm being dramatic of course--this is readable and probably fine. But there are situations with nesting even worse than this. If you're interested in how to flatten this out, read on.&lt;/p&gt;
&lt;h2 id="recompose"&gt;Recompose&lt;/h2&gt;
&lt;p&gt;I like the &lt;a href="#recompose"&gt;recompose&lt;/a&gt; utility library, it adds some functional helpers to React apps. One helper that we'll leverage here is called &lt;code&gt;nest&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;import { nest } from &amp;quot;recompose&amp;quot;;

const AppProviders = nest(
  Provider,
  ConnectedRouter,
  JssProvider,
  MuiThemeProvider,
  MuiPickersUtilsProvider
);

ReactDOM.render(
  &amp;lt;AppProviders 
    store={store} 
    history={history} 
    jss={jss} 
    generateClassName={generateClassName} 
    theme={theme} 
    utils={MomentUtils}
  &amp;gt;    
    &amp;lt;App /&amp;gt; {/* That's a bit better */}
  &amp;lt;/AppProviders&amp;gt;,
  document.getElementById('root')
)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This actually works. What's happening here is that &lt;code&gt;nest&lt;/code&gt; will take each component you give it and nest one after the other, in order of top to bottom. What you can do then is pass props that &lt;strong&gt;get passed to each nested component&lt;/strong&gt;. This is the important bit and as it turns out will cause warnings in the console because some components have prop validation that will get angry at you if you pass them props they don't expect.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;index.js:2178 Warning: Failed prop type: The following properties are not supported: `store`, `history`, `jss`, `generateClassName`, `utils`. Please remove them.
    in MuiThemeProvider (created by nest(Provider, ConnectedRouter, JssProvider, MuiThemeProvider, MuiPickersUtilsProvider))
    in nest(Provider, ConnectedRouter, JssProvider, MuiThemeProvider, MuiPickersUtilsProvider)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Oopsie. &lt;code&gt;nest&lt;/code&gt; does accept stateless components as arguments, though. Let's do that!&lt;/p&gt;
&lt;h2 id="nest-with-stateless-components"&gt;Nest with Stateless Components&lt;/h2&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;import { nest } from &amp;quot;recompose&amp;quot;;

// Nest providers in this order (top to bottom)
const withProviders = wrap(
  ({ children }) =&amp;gt; &amp;lt;Provider store={store}&amp;gt;{children}&amp;lt;/Provider&amp;gt;,
  ({ children }) =&amp;gt; &amp;lt;ConnectedRouter history={history}&amp;gt;{children}&amp;lt;/ConnectedRouter&amp;gt;,
  ({ children }) =&amp;gt; (
    &amp;lt;JssProvider jss={jss} generateClassName={generateClassName}&amp;gt;
      {children}
    &amp;lt;/JssProvider&amp;gt;
  ),
  ({ children }) =&amp;gt; &amp;lt;MuiThemeProvider theme={theme}&amp;gt;{children}&amp;lt;/MuiThemeProvider&amp;gt;,
  ({ children }) =&amp;gt; (
    &amp;lt;MuiPickersUtilsProvider utils={MomentUtils}&amp;gt;{children}&amp;lt;/MuiPickersUtilsProvider&amp;gt;
  )
);

ReactDOM.render(
  React.createElement(withProviders(App)), 
  document.getElementById('root')
);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Alright. This also works. Buuuuut, I mean, c'mon, this somehow seems &lt;em&gt;worse&lt;/em&gt;, right?&lt;/p&gt;
&lt;p&gt;Is there a middle-ground of readability and less duplicated code? Of course! Let's just write a little helper to take pairs of components and their props and pass that to &lt;code&gt;nest&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id="nesting-with-componentprop-pairs"&gt;Nesting with Component/Prop Pairs&lt;/h2&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;// Nest components in this order (top to bottom)
const AppProviders = nestPairs(
  [Provider, { store }],
  [ConnectedRouter, { history }],
  [JssProvider, { jss, generateClassName }],
  [MuiThemeProvider, { theme }],
  [MuiPickersUtilsProvider, { utils: MomentUtils }]
);

ReactDOM.render(
  &amp;lt;AppProviders&amp;gt;
    &amp;lt;App /&amp;gt;
  &amp;lt;/AppProviders&amp;gt;, 
  document.getElementById('root'));
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Hey! That looks more readable &lt;em&gt;and&lt;/em&gt; solves the prop passing issue. This is what &lt;code&gt;nestPairs&lt;/code&gt; looks like:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;function nestPairs(...componentPropPairs) {
  return nest.apply(
    this,
    componentPropPairs.map(([ComponentClass, props]) =&amp;gt; 
      ({ children }) =&amp;gt; 
        React.createElement(ComponentClass, { ...props, children })
    )
  );
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And in TypeScript (what I'm using):&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-typescript"&gt;function nestPairs(this: any, ...componentPropPairs: Array&amp;lt;[React.ComponentType, any]&amp;gt;) {
  return nest.apply(
    this,
    componentPropPairs.map(([ComponentClass, props]): React.StatelessComponent&amp;lt;
      any
    &amp;gt; =&amp;gt; ({ children }) =&amp;gt; React.createElement&amp;lt;any&amp;gt;(ComponentClass, { ...props, children }))
  );
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We are taking the array pairs and mapping them to stateless components with all the blanks filled in. This keeps the input
relatively simple while still allowing custom props per component. In TypeScript, the downside is that you lose the strong
typing compared to the previous version but I'm willing to do that since in my case, this is only used in the entrypoint of
our app so it'll be real apparent if things don't work.&lt;/p&gt;
</content>
		<summary>&lt;p&gt;Here's a quick tip. Often in entry points of React applications, you have to do some bootstrapping with various providers from dependent modules like Material UI, Redux, JSS, and React Router. That's exactly the stack I'm using so that's what my example is based on.&lt;/p&gt;</summary>
	</entry>
</feed>